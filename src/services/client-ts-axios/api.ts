// tslint:disable
/**
 * Glodon PDC Catalog Service
 * # 概览  `PDC` = Project Data Center  ```yaml hello: world ```  # 概念及术语  ### 概念   ### 术语  #### Domain
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */
export enum AccessibleType {
    VISIBLE = 'VISIBLE',
    QUERYABLE = 'QUERYABLE',
    EDITABLE = 'EDITABLE'
}

/**
 * 
 * @export
 * @interface ApiInfo
 */
export interface ApiInfo {
    /**
     * 
     * @type {string}
     * @memberof ApiInfo
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInfo
     */
    method?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiInfo
     */
    code?: string;
}
/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    accountId?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    accountCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    accessKey?: string;
    /**
     * 
     * @type {number}
     * @memberof Application
     */
    createTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Application
     */
    modifyTime?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ApplicationType {
    SUBMITTED = 'SUBMITTED',
    PENDING = 'PENDING',
    APPROVED = 'APPROVED'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ApprovalOption {
    AUTHORIZE = 'AUTHORIZE',
    REFUSE = 'REFUSE'
}

/**
 * 
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    fileName: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    fileFormat: string;
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    fileSize: number;
}
/**
 * 
 * @export
 * @interface AuthAppCsDomain
 */
export interface AuthAppCsDomain {
    /**
     * 
     * @type {number}
     * @memberof AuthAppCsDomain
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AuthAppCsDomain
     */
    domainName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppCsDomain
     */
    domainAlias?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppCsDomain
     */
    domainDesc?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppCsDomain
     */
    appAccount: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppCsDomain
     */
    domainCode: string;
}
/**
 * 
 * @export
 * @interface AuthAppCsDomainAllOf
 */
export interface AuthAppCsDomainAllOf {
    /**
     * 
     * @type {number}
     * @memberof AuthAppCsDomainAllOf
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AuthAppCsDomainAllOf
     */
    domainName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppCsDomainAllOf
     */
    domainAlias?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppCsDomainAllOf
     */
    domainDesc?: string;
}
/**
 * 
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    domain: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AuthResponse
     */
    admin: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    token: string;
}
/**
 * 批量操作类型
 * @export
 * @enum {string}
 */
export enum BatchOperationType {
    ADD = 'ADD',
    REMOVE = 'REMOVE'
}

/**
 * 
 * @export
 * @interface BindAuthAppCsDomainParams
 */
export interface BindAuthAppCsDomainParams {
    /**
     * 
     * @type {string}
     * @memberof BindAuthAppCsDomainParams
     */
    appAccount: string;
    /**
     * 
     * @type {string}
     * @memberof BindAuthAppCsDomainParams
     */
    domainCode: string;
}
/**
 * 
 * @export
 * @interface ColumnTypeDefinition
 */
export interface ColumnTypeDefinition {
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof ColumnTypeDefinition
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ColumnTypeDefinition
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ColumnTypeDefinition
     */
    defaultValue?: string;
    /**
     * 
     * @type {string}
     * @memberof ColumnTypeDefinition
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ColumnTypeDefinition
     */
    dataTypeId: number;
    /**
     * 
     * @type {number}
     * @memberof ColumnTypeDefinition
     */
    maxLength?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ColumnTypeDefinition
     */
    required?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ColumnTypeDefinition
     */
    unique?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ColumnTypeDefinition
     */
    indexable?: boolean;
    /**
     * 定义当前列定义是否允许用户编辑，允许用户编辑除编码code外的其他属性
     * @type {boolean}
     * @memberof ColumnTypeDefinition
     */
    editable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ColumnTypeDefinition
     */
    safetyClass?: number;
}
/**
 * 
 * @export
 * @interface CommonResponse
 */
export interface CommonResponse {
    /**
     * 
     * @type {string}
     * @memberof CommonResponse
     */
    errorProperty?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonResponse
     */
    errorString?: string;
    /**
     * 
     * @type {number}
     * @memberof CommonResponse
     */
    returnCode?: number;
    /**
     * 
     * @type {object}
     * @memberof CommonResponse
     */
    result?: object;
}
/**
 * 
 * @export
 * @interface CreateDomainParams
 */
export interface CreateDomainParams {
    /**
     * 
     * @type {string}
     * @memberof CreateDomainParams
     */
    account: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof CreateDomainParams
     */
    name: string;
    /**
     * 英文名是大小写字母与数字、空格组合
     * @type {string}
     * @memberof CreateDomainParams
     */
    alias: string;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof CreateDomainParams
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDomainParams
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateDomainParams
     */
    environment: number;
    /**
     * 
     * @type {number}
     * @memberof CreateDomainParams
     */
    visibility: number;
    /**
     * 
     * @type {number}
     * @memberof CreateDomainParams
     */
    norm: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateDomainParams
     */
    allowDataExport?: boolean;
    /**
     * 
     * @type {object}
     * @memberof CreateDomainParams
     */
    attributes?: object;
    /**
     * 
     * @type {number}
     * @memberof CreateDomainParams
     */
    domainCategory?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateDomainParams
     */
    engineInstanceIds?: Array<number>;
    /**
     * 
     * @type {Array<DomainMemberUpdatable>}
     * @memberof CreateDomainParams
     */
    domainMembers: Array<DomainMemberUpdatable>;
}
/**
 * 
 * @export
 * @interface CreateResourceApplicationParams
 */
export interface CreateResourceApplicationParams {
    /**
     * 
     * @type {string}
     * @memberof CreateResourceApplicationParams
     */
    resourceDomainCode: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof CreateResourceApplicationParams
     */
    applicant: string;
    /**
     * 
     * @type {string}
     * @memberof CreateResourceApplicationParams
     */
    account: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof CreateResourceApplicationParams
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateResourceApplicationParams
     */
    description?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateResourceApplicationParams
     */
    attachments?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof CreateResourceApplicationParams
     */
    isGlobalDomain: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateResourceApplicationParams
     */
    onlyResourcesWithSelectedScope?: boolean;
    /**
     * 
     * @type {Array<PdcResourcePermissionUpdatable>}
     * @memberof CreateResourceApplicationParams
     */
    resources: Array<PdcResourcePermissionUpdatable>;
}
/**
 * 
 * @export
 * @interface DataSetNamespace
 */
export interface DataSetNamespace {
    /**
     * 
     * @type {string}
     * @memberof DataSetNamespace
     */
    domainCode: string;
    /**
     * 
     * @type {string}
     * @memberof DataSetNamespace
     */
    tableCode: string;
}
/**
 * 
 * @export
 * @interface DatasourceConfig
 */
export interface DatasourceConfig {
    /**
     * 
     * @type {number}
     * @memberof DatasourceConfig
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DatasourceConfig
     */
    host: string;
    /**
     * 
     * @type {string}
     * @memberof DatasourceConfig
     */
    port: string;
    /**
     * 
     * @type {string}
     * @memberof DatasourceConfig
     */
    protocol: string;
    /**
     * 
     * @type {object}
     * @memberof DatasourceConfig
     */
    config: object;
    /**
     * 
     * @type {string}
     * @memberof DatasourceConfig
     */
    dbName: string;
    /**
     * 
     * @type {string}
     * @memberof DatasourceConfig
     */
    tableName: string;
}
/**
 * 
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     * 
     * @type {number}
     * @memberof Domain
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    alias?: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Domain
     */
    environment?: number;
    /**
     * 
     * @type {number}
     * @memberof Domain
     */
    visibility?: number;
    /**
     * 
     * @type {number}
     * @memberof Domain
     */
    norm?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Domain
     */
    allowDataExport?: boolean;
    /**
     * 
     * @type {object}
     * @memberof Domain
     */
    attributes?: object;
    /**
     * 
     * @type {boolean}
     * @memberof Domain
     */
    del?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Domain
     */
    deleteAt?: number;
    /**
     * 
     * @type {number}
     * @memberof Domain
     */
    createAt?: number;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    createBy?: string;
    /**
     * 
     * @type {number}
     * @memberof Domain
     */
    updateAt?: number;
    /**
     * 
     * @type {number}
     * @memberof Domain
     */
    domainCategory?: number;
    /**
     * 
     * @type {Array<Role>}
     * @memberof Domain
     */
    currentUserRoles?: Array<Role>;
    /**
     * 
     * @type {Array<ResourceEngineInstance>}
     * @memberof Domain
     */
    openedEngines?: Array<ResourceEngineInstance>;
}
/**
 * 
 * @export
 * @interface DomainDB
 */
export interface DomainDB {
    /**
     * 
     * @type {string}
     * @memberof DomainDB
     */
    dbName?: string;
}
/**
 * 
 * @export
 * @interface DomainEngineInstanceUpdatable
 */
export interface DomainEngineInstanceUpdatable {
    /**
     * 
     * @type {number}
     * @memberof DomainEngineInstanceUpdatable
     */
    engineInstanceId?: number;
}
/**
 * 
 * @export
 * @interface DomainMember
 */
export interface DomainMember {
    /**
     * 
     * @type {number}
     * @memberof DomainMember
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof DomainMember
     */
    domainCode: string;
    /**
     * 
     * @type {string}
     * @memberof DomainMember
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainMember
     */
    account: string;
    /**
     * 
     * @type {Array<Role>}
     * @memberof DomainMember
     */
    roles: Array<Role>;
}
/**
 * 
 * @export
 * @interface DomainMemberUpdatable
 */
export interface DomainMemberUpdatable {
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof DomainMemberUpdatable
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DomainMemberUpdatable
     */
    account: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DomainMemberUpdatable
     */
    roles: Array<string>;
}
/**
 * 
 * @export
 * @interface EntityType
 */
export interface EntityType {
    /**
     * 
     * @type {number}
     * @memberof EntityType
     */
    id?: number;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof EntityType
     */
    name?: string;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof EntityType
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityType
     */
    superType?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityType
     */
    serviceType?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityType
     */
    description?: string;
    /**
     * 
     * @type {Array<ColumnTypeDefinition>}
     * @memberof EntityType
     */
    attributeDefs?: Array<ColumnTypeDefinition>;
}
/**
 * 
 * @export
 * @interface EntityTypeTree
 */
export interface EntityTypeTree {
    /**
     * 
     * @type {string}
     * @memberof EntityTypeTree
     */
    code?: string;
    /**
     * 
     * @type {Array<EntityTypeTree>}
     * @memberof EntityTypeTree
     */
    children?: Array<EntityTypeTree>;
}
/**
 * 
 * @export
 * @interface EnumElement
 */
export interface EnumElement {
    /**
     * 
     * @type {number}
     * @memberof EnumElement
     */
    ordinal?: number;
    /**
     * 
     * @type {string}
     * @memberof EnumElement
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof EnumElement
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EnumElement
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EnumType
 */
export interface EnumType {
    /**
     * 
     * @type {number}
     * @memberof EnumType
     */
    id: number;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof EnumType
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof EnumType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EnumType
     */
    defaultValue?: string;
    /**
     * 
     * @type {string}
     * @memberof EnumType
     */
    serviceType?: string;
    /**
     * 
     * @type {Array<EnumElement>}
     * @memberof EnumType
     */
    elementDefs?: Array<EnumElement>;
}
/**
 * 
 * @export
 * @interface EnumTypeAllOf
 */
export interface EnumTypeAllOf {
    /**
     * 
     * @type {number}
     * @memberof EnumTypeAllOf
     */
    id: number;
}
/**
 * 
 * @export
 * @interface EnumTypeUpdatable
 */
export interface EnumTypeUpdatable {
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof EnumTypeUpdatable
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof EnumTypeUpdatable
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EnumTypeUpdatable
     */
    defaultValue?: string;
    /**
     * 
     * @type {string}
     * @memberof EnumTypeUpdatable
     */
    serviceType?: string;
    /**
     * 
     * @type {Array<EnumElement>}
     * @memberof EnumTypeUpdatable
     */
    elementDefs?: Array<EnumElement>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum EnvironmentType {
    DEV = 'DEV',
    PROD = 'PROD'
}

/**
 * 
 * @export
 * @interface FileProperty
 */
export interface FileProperty {
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof FileProperty
     */
    code: string;
    /**
     * 
     * @type {object}
     * @memberof FileProperty
     */
    value?: object;
}
/**
 * 
 * @export
 * @interface FileUpdatable
 */
export interface FileUpdatable {
    /**
     * 
     * @type {Array<FileProperty>}
     * @memberof FileUpdatable
     */
    fileProperties: Array<FileProperty>;
}
/**
 * 
 * @export
 * @interface FilterCondition
 */
export interface FilterCondition {
    /**
     * 
     * @type {Array<FilterItem>}
     * @memberof FilterCondition
     */
    filters: Array<FilterItem>;
}
/**
 * 
 * @export
 * @interface FilterItem
 */
export interface FilterItem {
    /**
     * 
     * @type {string}
     * @memberof FilterItem
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof FilterItem
     */
    operator: FilterItemOperatorEnum;
    /**
     * 
     * @type {object}
     * @memberof FilterItem
     */
    value: object;
}

/**
    * @export
    * @enum {string}
    */
export enum FilterItemOperatorEnum {
    EQ = 'EQ',
    NE = 'NE',
    GE = 'GE',
    GT = 'GT',
    LE = 'LE',
    LT = 'LT',
    IN = 'IN',
    NIN = 'NIN'
}

/**
 * 过滤器数字型数据操作符的类型
 * @export
 * @enum {string}
 */
export enum FilterNumberOperationType {
    EQ = 'EQ',
    NE = 'NE',
    GE = 'GE',
    GT = 'GT',
    LE = 'LE',
    LT = 'LT',
    IN = 'IN',
    NIN = 'NIN'
}

/**
 * 
 * @export
 * @interface FilterOperation
 */
export interface FilterOperation {
    /**
     * 
     * @type {string}
     * @memberof FilterOperation
     */
    field: string;
    /**
     * 
     * @type {FilterOperationType}
     * @memberof FilterOperation
     */
    op: FilterOperationType;
    /**
     * 
     * @type {string}
     * @memberof FilterOperation
     */
    value?: string;
}
/**
 * 过滤器所有操作符的类型
 * @export
 * @enum {string}
 */
export enum FilterOperationType {
    EQ = 'EQ',
    NE = 'NE',
    GE = 'GE',
    GT = 'GT',
    LE = 'LE',
    LT = 'LT',
    IN = 'IN',
    NIN = 'NIN'
}

/**
 * 过滤器字符串型数据操作符的类型
 * @export
 * @enum {string}
 */
export enum FilterStringOperationType {
    EQ = 'EQ',
    NE = 'NE',
    IN = 'IN',
    NIN = 'NIN'
}

/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof Pageable
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Pageable
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Pageable
     */
    lastPage?: boolean;
}
/**
 * 
 * @export
 * @interface PagedApplication
 */
export interface PagedApplication {
    /**
     * 
     * @type {number}
     * @memberof PagedApplication
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedApplication
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedApplication
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedApplication
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedApplication
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedApplication
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedApplication
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedApplication
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<Application>}
     * @memberof PagedApplication
     */
    content?: Array<Application>;
}
/**
 * 
 * @export
 * @interface PagedAuthAppCsDomain
 */
export interface PagedAuthAppCsDomain {
    /**
     * 
     * @type {number}
     * @memberof PagedAuthAppCsDomain
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedAuthAppCsDomain
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedAuthAppCsDomain
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedAuthAppCsDomain
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedAuthAppCsDomain
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedAuthAppCsDomain
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedAuthAppCsDomain
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedAuthAppCsDomain
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<AuthAppCsDomain>}
     * @memberof PagedAuthAppCsDomain
     */
    content?: Array<AuthAppCsDomain>;
}
/**
 * 
 * @export
 * @interface PagedDomain
 */
export interface PagedDomain {
    /**
     * 
     * @type {number}
     * @memberof PagedDomain
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedDomain
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedDomain
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedDomain
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedDomain
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedDomain
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedDomain
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedDomain
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<Domain>}
     * @memberof PagedDomain
     */
    content?: Array<Domain>;
}
/**
 * 
 * @export
 * @interface PagedDomainMember
 */
export interface PagedDomainMember {
    /**
     * 
     * @type {number}
     * @memberof PagedDomainMember
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedDomainMember
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedDomainMember
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedDomainMember
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedDomainMember
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedDomainMember
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedDomainMember
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedDomainMember
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<DomainMember>}
     * @memberof PagedDomainMember
     */
    content?: Array<DomainMember>;
}
/**
 * 
 * @export
 * @interface PagedEntityTypeTree
 */
export interface PagedEntityTypeTree {
    /**
     * 
     * @type {number}
     * @memberof PagedEntityTypeTree
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedEntityTypeTree
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedEntityTypeTree
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedEntityTypeTree
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedEntityTypeTree
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedEntityTypeTree
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedEntityTypeTree
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedEntityTypeTree
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<EntityTypeTree>}
     * @memberof PagedEntityTypeTree
     */
    content?: Array<EntityTypeTree>;
}
/**
 * 
 * @export
 * @interface PagedEnumType
 */
export interface PagedEnumType {
    /**
     * 
     * @type {number}
     * @memberof PagedEnumType
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedEnumType
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedEnumType
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedEnumType
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedEnumType
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedEnumType
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedEnumType
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedEnumType
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<EnumType>}
     * @memberof PagedEnumType
     */
    content?: Array<EnumType>;
}
/**
 * 
 * @export
 * @interface PagedObjectResponse
 */
export interface PagedObjectResponse {
    /**
     *
     * @type {number}
     * @memberof PagedObjectResponse
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedObjectResponse
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedObjectResponse
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedObjectResponse
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedObjectResponse
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedObjectResponse
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedObjectResponse
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedObjectResponse
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof PagedObjectResponse
     */
    content?: Array<object>;
}
/**
 * 
 * @export
 * @interface PagedPartitionInfo
 */
export interface PagedPartitionInfo {
    /**
     * 
     * @type {number}
     * @memberof PagedPartitionInfo
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPartitionInfo
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPartitionInfo
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedPartitionInfo
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedPartitionInfo
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPartitionInfo
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPartitionInfo
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPartitionInfo
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<PartitionInfo>}
     * @memberof PagedPartitionInfo
     */
    content?: Array<PartitionInfo>;
}
/**
 * 
 * @export
 * @interface PagedPdcResource
 */
export interface PagedPdcResource {
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResource
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResource
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResource
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedPdcResource
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResource
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResource
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPdcResource
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPdcResource
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<PdcResource>}
     * @memberof PagedPdcResource
     */
    content?: Array<PdcResource>;
}
/**
 * 
 * @export
 * @interface PagedPdcResourceIndex
 */
export interface PagedPdcResourceIndex {
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceIndex
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceIndex
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceIndex
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedPdcResourceIndex
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceIndex
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceIndex
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPdcResourceIndex
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPdcResourceIndex
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<PdcResourceIndex>}
     * @memberof PagedPdcResourceIndex
     */
    content?: Array<PdcResourceIndex>;
}
/**
 * 
 * @export
 * @interface PagedPdcResourcePermission
 */
export interface PagedPdcResourcePermission {
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourcePermission
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourcePermission
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourcePermission
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedPdcResourcePermission
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourcePermission
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourcePermission
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPdcResourcePermission
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPdcResourcePermission
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<PdcResourcePermission>}
     * @memberof PagedPdcResourcePermission
     */
    content?: Array<PdcResourcePermission>;
}
/**
 * 
 * @export
 * @interface PagedPdcResourceProperty
 */
export interface PagedPdcResourceProperty {
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceProperty
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceProperty
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceProperty
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedPdcResourceProperty
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceProperty
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedPdcResourceProperty
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPdcResourceProperty
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedPdcResourceProperty
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<PdcResourceProperty>}
     * @memberof PagedPdcResourceProperty
     */
    content?: Array<PdcResourceProperty>;
}
/**
 * 
 * @export
 * @interface PagedProcessResource
 */
export interface PagedProcessResource {
    /**
     * 
     * @type {number}
     * @memberof PagedProcessResource
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedProcessResource
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedProcessResource
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedProcessResource
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedProcessResource
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedProcessResource
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedProcessResource
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedProcessResource
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<ProcessResource>}
     * @memberof PagedProcessResource
     */
    content?: Array<ProcessResource>;
}
/**
 * 
 * @export
 * @interface PagedRelationship
 */
export interface PagedRelationship {
    /**
     * 
     * @type {number}
     * @memberof PagedRelationship
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedRelationship
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedRelationship
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedRelationship
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedRelationship
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedRelationship
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedRelationship
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedRelationship
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<Relationship>}
     * @memberof PagedRelationship
     */
    content?: Array<Relationship>;
}
/**
 * 
 * @export
 * @interface PagedResourceApplication
 */
export interface PagedResourceApplication {
    /**
     * 
     * @type {number}
     * @memberof PagedResourceApplication
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceApplication
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceApplication
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedResourceApplication
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceApplication
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceApplication
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedResourceApplication
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedResourceApplication
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<ResourceApplication>}
     * @memberof PagedResourceApplication
     */
    content?: Array<ResourceApplication>;
}
/**
 * 
 * @export
 * @interface PagedResourceEngine
 */
export interface PagedResourceEngine {
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngine
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngine
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngine
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedResourceEngine
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngine
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngine
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedResourceEngine
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedResourceEngine
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<ResourceEngine>}
     * @memberof PagedResourceEngine
     */
    content?: Array<ResourceEngine>;
}
/**
 * 
 * @export
 * @interface PagedResourceEngineInstance
 */
export interface PagedResourceEngineInstance {
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngineInstance
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngineInstance
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngineInstance
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedResourceEngineInstance
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngineInstance
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResourceEngineInstance
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedResourceEngineInstance
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedResourceEngineInstance
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<ResourceEngineInstance>}
     * @memberof PagedResourceEngineInstance
     */
    content?: Array<ResourceEngineInstance>;
}
/**
 * 
 * @export
 * @interface PagedRole
 */
export interface PagedRole {
    /**
     * 
     * @type {number}
     * @memberof PagedRole
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedRole
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedRole
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedRole
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedRole
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedRole
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedRole
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedRole
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<Role>}
     * @memberof PagedRole
     */
    content?: Array<Role>;
}
/**
 * 
 * @export
 * @interface PagedScope
 */
export interface PagedScope {
    /**
     * 
     * @type {number}
     * @memberof PagedScope
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedScope
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedScope
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedScope
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedScope
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedScope
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedScope
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedScope
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<Scope>}
     * @memberof PagedScope
     */
    content?: Array<Scope>;
}
/**
 * 
 * @export
 * @interface PagedTag
 */
export interface PagedTag {
    /**
     * 
     * @type {number}
     * @memberof PagedTag
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedTag
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedTag
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedTag
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedTag
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedTag
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedTag
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedTag
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof PagedTag
     */
    content?: Array<Tag>;
}
/**
 * 
 * @export
 * @interface PagedTagTreeDomain
 */
export interface PagedTagTreeDomain {
    /**
     * 
     * @type {number}
     * @memberof PagedTagTreeDomain
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedTagTreeDomain
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedTagTreeDomain
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedTagTreeDomain
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedTagTreeDomain
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedTagTreeDomain
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedTagTreeDomain
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedTagTreeDomain
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<TagTreeDomain>}
     * @memberof PagedTagTreeDomain
     */
    content?: Array<TagTreeDomain>;
}
/**
 * 
 * @export
 * @interface PagedView
 */
export interface PagedView {
    /**
     * 
     * @type {number}
     * @memberof PagedView
     */
    number?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedView
     */
    numberOfElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedView
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof PagedView
     */
    sort?: string;
    /**
     * 
     * @type {number}
     * @memberof PagedView
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedView
     */
    totalPages?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedView
     */
    firstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedView
     */
    lastPage?: boolean;
    /**
     * 
     * @type {Array<View>}
     * @memberof PagedView
     */
    content?: Array<View>;
}
/**
 * 
 * @export
 * @interface PartitionInfo
 */
export interface PartitionInfo {
    /**
     * 
     * @type {boolean}
     * @memberof PartitionInfo
     */
    isPartition: boolean;
    /**
     * 
     * @type {number}
     * @memberof PartitionInfo
     */
    type?: number;
    /**
     * 
     * @type {object}
     * @memberof PartitionInfo
     */
    partitions?: object;
}
/**
 * 
 * @export
 * @interface PartitionSetting
 */
export interface PartitionSetting {
    /**
     * 
     * @type {Array<string>}
     * @memberof PartitionSetting
     */
    columns: Array<string>;
    /**
     * 
     * @type {Array<PartitionSettingDetail>}
     * @memberof PartitionSetting
     */
    details: Array<PartitionSettingDetail>;
}
/**
 * 
 * @export
 * @interface PartitionSettingDetail
 */
export interface PartitionSettingDetail {
    /**
     * 
     * @type {string}
     * @memberof PartitionSettingDetail
     */
    tableCode: string;
    /**
     * 
     * @type {boolean}
     * @memberof PartitionSettingDetail
     */
    isDefault?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PartitionSettingDetail
     */
    fromValue?: string;
    /**
     * 
     * @type {string}
     * @memberof PartitionSettingDetail
     */
    toValue?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PartitionSettingDetail
     */
    listIn?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PartitionSettingDetail
     */
    hashNum?: number;
}
/**
 * 
 * @export
 * @interface PdcDomainPermission
 */
export interface PdcDomainPermission {
    /**
     * 
     * @type {number}
     * @memberof PdcDomainPermission
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PdcDomainPermission
     */
    domainCode: string;
    /**
     * 
     * @type {boolean}
     * @memberof PdcDomainPermission
     */
    onlyResourcesWithSelectedScope?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PdcDomainPermission
     */
    expiration: number;
    /**
     * 
     * @type {number}
     * @memberof PdcDomainPermission
     */
    safetyClass: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PdcDomainPermission
     */
    permissions: Array<number>;
    /**
     * 
     * @type {Array<PdcResourcePermissionScope>}
     * @memberof PdcDomainPermission
     */
    scopes?: Array<PdcResourcePermissionScope>;
}
/**
 * 
 * @export
 * @interface PdcResource
 */
export interface PdcResource {
    /**
     * 
     * @type {number}
     * @memberof PdcResource
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResource
     */
    createBy?: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResource
     */
    createAt?: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResource
     */
    updateBy?: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResource
     */
    updateAt?: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResource
     */
    account?: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResource
     */
    domainCode: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResource
     */
    engineInstanceId: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResource
     */
    resourceType: string;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof PdcResource
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof PdcResource
     */
    name?: string;
    /**
     * 英文名是大小写字母与数字、空格组合
     * @type {string}
     * @memberof PdcResource
     */
    alias?: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResource
     */
    description?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PdcResource
     */
    scopes?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PdcResource
     */
    tags?: Array<number>;
    /**
     * 
     * @type {Array<PdcResourceProperty>}
     * @memberof PdcResource
     */
    properties?: Array<PdcResourceProperty>;
    /**
     * 
     * @type {Array<PdcResourceIndex>}
     * @memberof PdcResource
     */
    indexes?: Array<PdcResourceIndex>;
    /**
     * 
     * @type {PartitionInfo}
     * @memberof PdcResource
     */
    partitionInfo?: PartitionInfo;
    /**
     * 
     * @type {Array<RelationshipCreatable>}
     * @memberof PdcResource
     */
    relationships?: Array<RelationshipCreatable>;
}
/**
 * 
 * @export
 * @interface PdcResourceAllOf
 */
export interface PdcResourceAllOf {
    /**
     * 
     * @type {number}
     * @memberof PdcResourceAllOf
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceAllOf
     */
    createBy?: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourceAllOf
     */
    createAt?: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceAllOf
     */
    updateBy?: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourceAllOf
     */
    updateAt?: number;
}
/**
 * 
 * @export
 * @interface PdcResourceIndex
 */
export interface PdcResourceIndex {
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof PdcResourceIndex
     */
    code: string;
    /**
     * 支持复合索引
     * @type {Array<PdcResourcePropertyIndex>}
     * @memberof PdcResourceIndex
     */
    indexProperties: Array<PdcResourcePropertyIndex>;
    /**
     * 
     * @type {boolean}
     * @memberof PdcResourceIndex
     */
    unique?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PdcResourceIndex
     */
    engine: number;
}
/**
 * 
 * @export
 * @interface PdcResourceParameter
 */
export interface PdcResourceParameter {
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof PdcResourceParameter
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceParameter
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceParameter
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceParameter
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface PdcResourcePermission
 */
export interface PdcResourcePermission {
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermission
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResourcePermission
     */
    resourceDomainCode: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermission
     */
    resourceId: number;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof PdcResourcePermission
     */
    resourceCode?: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof PdcResourcePermission
     */
    resourceName: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourcePermission
     */
    resourceOwner: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermission
     */
    expiration: number;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermission
     */
    safetyClass: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PdcResourcePermission
     */
    permissions?: Array<number>;
    /**
     * 
     * @type {Array<PdcResourcePermissionScope>}
     * @memberof PdcResourcePermission
     */
    scopes?: Array<PdcResourcePermissionScope>;
    /**
     * 
     * @type {Array<PdcResourceProperty>}
     * @memberof PdcResourcePermission
     */
    properties?: Array<PdcResourceProperty>;
}
/**
 * 
 * @export
 * @interface PdcResourcePermissionScope
 */
export interface PdcResourcePermissionScope {
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermissionScope
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResourcePermissionScope
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof PdcResourcePermissionScope
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourcePermissionScope
     */
    domainCode?: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermissionScope
     */
    resourceId?: number;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermissionScope
     */
    displayPropertyId?: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResourcePermissionScope
     */
    displayPropertyCode?: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermissionScope
     */
    filterOperator: number;
    /**
     * 
     * @type {Array<ScopeParameter>}
     * @memberof PdcResourcePermissionScope
     */
    parameters: Array<ScopeParameter>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PdcResourcePermissionScope
     */
    parametersValueList: Array<string>;
}
/**
 * 
 * @export
 * @interface PdcResourcePermissionScopeUpdatable
 */
export interface PdcResourcePermissionScopeUpdatable {
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermissionScopeUpdatable
     */
    scopeId: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PdcResourcePermissionScopeUpdatable
     */
    parametersValueList: Array<string>;
}
/**
 * 
 * @export
 * @interface PdcResourcePermissionUpdatable
 */
export interface PdcResourcePermissionUpdatable {
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermissionUpdatable
     */
    resourceId?: number;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermissionUpdatable
     */
    expiration: number;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePermissionUpdatable
     */
    safetyClass: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PdcResourcePermissionUpdatable
     */
    permissions?: Array<number>;
    /**
     * 
     * @type {Array<PdcResourcePermissionScopeUpdatable>}
     * @memberof PdcResourcePermissionUpdatable
     */
    scopes?: Array<PdcResourcePermissionScopeUpdatable>;
}
/**
 * 
 * @export
 * @interface PdcResourceProperty
 */
export interface PdcResourceProperty {
    /**
     * 
     * @type {number}
     * @memberof PdcResourceProperty
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PdcResourceProperty
     */
    resourceId?: number;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof PdcResourceProperty
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceProperty
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceProperty
     */
    defaultValue?: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceProperty
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourceProperty
     */
    dataTypeId: number;
    /**
     * 
     * @type {number}
     * @memberof PdcResourceProperty
     */
    maxLength?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PdcResourceProperty
     */
    required?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PdcResourceProperty
     */
    unique?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PdcResourceProperty
     */
    safetyClass?: number;
}
/**
 * 
 * @export
 * @interface PdcResourcePropertyIndex
 */
export interface PdcResourcePropertyIndex {
    /**
     * 
     * @type {string}
     * @memberof PdcResourcePropertyIndex
     */
    propertyCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PdcResourcePropertyIndex
     */
    ascending?: boolean;
}
/**
 * 
 * @export
 * @interface PdcResourcePropertyUpdatable
 */
export interface PdcResourcePropertyUpdatable {
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof PdcResourcePropertyUpdatable
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof PdcResourcePropertyUpdatable
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourcePropertyUpdatable
     */
    defaultValue?: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourcePropertyUpdatable
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePropertyUpdatable
     */
    dataTypeId: number;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePropertyUpdatable
     */
    maxLength?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PdcResourcePropertyUpdatable
     */
    required?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PdcResourcePropertyUpdatable
     */
    unique?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PdcResourcePropertyUpdatable
     */
    safetyClass?: number;
}
/**
 * 
 * @export
 * @interface PdcResourceUpdatable
 */
export interface PdcResourceUpdatable {
    /**
     * 
     * @type {string}
     * @memberof PdcResourceUpdatable
     */
    account?: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceUpdatable
     */
    domainCode: string;
    /**
     * 
     * @type {number}
     * @memberof PdcResourceUpdatable
     */
    engineInstanceId: number;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceUpdatable
     */
    resourceType: string;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof PdcResourceUpdatable
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof PdcResourceUpdatable
     */
    name?: string;
    /**
     * 英文名是大小写字母与数字、空格组合
     * @type {string}
     * @memberof PdcResourceUpdatable
     */
    alias?: string;
    /**
     * 
     * @type {string}
     * @memberof PdcResourceUpdatable
     */
    description?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PdcResourceUpdatable
     */
    scopes?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PdcResourceUpdatable
     */
    tags?: Array<number>;
    /**
     * 
     * @type {Array<PdcResourceProperty>}
     * @memberof PdcResourceUpdatable
     */
    properties?: Array<PdcResourceProperty>;
    /**
     * 
     * @type {Array<PdcResourceIndex>}
     * @memberof PdcResourceUpdatable
     */
    indexes?: Array<PdcResourceIndex>;
    /**
     * 
     * @type {PartitionInfo}
     * @memberof PdcResourceUpdatable
     */
    partitionInfo?: PartitionInfo;
    /**
     * 
     * @type {Array<RelationshipCreatable>}
     * @memberof PdcResourceUpdatable
     */
    relationships?: Array<RelationshipCreatable>;
}
/**
 * 
 * @export
 * @interface PolicyRequest
 */
export interface PolicyRequest {
    /**
     * 
     * @type {string}
     * @memberof PolicyRequest
     */
    fileName: string;
    /**
     * 
     * @type {number}
     * @memberof PolicyRequest
     */
    fileSize: number;
}
/**
 * 
 * @export
 * @interface ProcessParameters
 */
export interface ProcessParameters {
    /**
     * 
     * @type {string}
     * @memberof ProcessParameters
     */
    type: ProcessParametersTypeEnum;
    /**
     * 
     * @type {Array<DataSetNamespace>}
     * @memberof ProcessParameters
     */
    inputResources?: Array<DataSetNamespace>;
    /**
     * 
     * @type {Array<ProcessResourceDef>}
     * @memberof ProcessParameters
     */
    outputs: Array<ProcessResourceDef>;
    /**
     * 处理脚本。如：当Process为SQL时为SQL
     * @type {string}
     * @memberof ProcessParameters
     */
    script: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessParameters
     */
    cron?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ProcessParametersTypeEnum {
    SQL = 'SQL'
}

/**
 * 
 * @export
 * @interface ProcessResource
 */
export interface ProcessResource {
    /**
     * 
     * @type {number}
     * @memberof ProcessResource
     */
    id?: number;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof ProcessResource
     */
    name?: string;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof ProcessResource
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessResource
     */
    domainCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessResource
     */
    engineInstanceId?: number;
    /**
     * 取值同系统的Process资源定义一直。如：pg_sql、cron_task等
     * @type {string}
     * @memberof ProcessResource
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessResource
     */
    description?: string;
    /**
     * 
     * @type {ProcessParameters}
     * @memberof ProcessResource
     */
    parameters?: ProcessParameters;
}
/**
 * 
 * @export
 * @interface ProcessResourceDef
 */
export interface ProcessResourceDef {
    /**
     * 
     * @type {DataSetNamespace}
     * @memberof ProcessResourceDef
     */
    resource: DataSetNamespace;
    /**
     * 
     * @type {ProcessResourceDefStrategy}
     * @memberof ProcessResourceDef
     */
    storage: ProcessResourceDefStrategy;
}
/**
 * 数据处理结果保存到目标输出数据集时的策略设置
 * @export
 * @interface ProcessResourceDefStrategy
 */
export interface ProcessResourceDefStrategy {
    /**
     * 
     * @type {string}
     * @memberof ProcessResourceDefStrategy
     */
    strategy: ProcessResourceDefStrategyStrategyEnum;
    /**
     * 支持多个属性，仅对覆盖类型有效
     * @type {Array<PropertyNamespace>}
     * @memberof ProcessResourceDefStrategy
     */
    overrideKey?: Array<PropertyNamespace>;
}

/**
    * @export
    * @enum {string}
    */
export enum ProcessResourceDefStrategyStrategyEnum {
    APPEND = 'APPEND',
    OVERRIDE = 'OVERRIDE'
}

/**
 * 
 * @export
 * @interface ProcessResourceUpdatable
 */
export interface ProcessResourceUpdatable {
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof ProcessResourceUpdatable
     */
    name: string;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof ProcessResourceUpdatable
     */
    code: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessResourceUpdatable
     */
    engineInstanceId: number;
    /**
     * 取值同系统的Process资源定义一直。如：pg_sql、cron_task等
     * @type {string}
     * @memberof ProcessResourceUpdatable
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessResourceUpdatable
     */
    description?: string;
    /**
     * 
     * @type {ProcessParameters}
     * @memberof ProcessResourceUpdatable
     */
    parameters: ProcessParameters;
}
/**
 * 
 * @export
 * @interface PropertyNamespace
 */
export interface PropertyNamespace {
    /**
     * 
     * @type {string}
     * @memberof PropertyNamespace
     */
    domainCode: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyNamespace
     */
    tableCode: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyNamespace
     */
    propertyCode: string;
}
/**
 * 
 * @export
 * @interface Relationship
 */
export interface Relationship {
    /**
     * 
     * @type {number}
     * @memberof Relationship
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    createBy?: string;
    /**
     * 
     * @type {number}
     * @memberof Relationship
     */
    createAt?: number;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    updateBy?: string;
    /**
     * 
     * @type {number}
     * @memberof Relationship
     */
    updateAt?: number;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    sourceDomainCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    targetDomainCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    sourceResourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    sourceResourcePropertyName?: string;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    targetResourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    targetResourcePropertyName?: string;
    /**
     * 
     * @type {number}
     * @memberof Relationship
     */
    type: number;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof Relationship
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof Relationship
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Relationship
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Relationship
     */
    sourceResourceId: number;
    /**
     * 
     * @type {number}
     * @memberof Relationship
     */
    sourceResourcePropertyId: number;
    /**
     * 
     * @type {number}
     * @memberof Relationship
     */
    targetResourceId: number;
    /**
     * 
     * @type {number}
     * @memberof Relationship
     */
    targetResourcePropertyId: number;
}
/**
 * 
 * @export
 * @interface RelationshipAllOf
 */
export interface RelationshipAllOf {
    /**
     * 
     * @type {number}
     * @memberof RelationshipAllOf
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RelationshipAllOf
     */
    createBy?: string;
    /**
     * 
     * @type {number}
     * @memberof RelationshipAllOf
     */
    createAt?: number;
    /**
     * 
     * @type {string}
     * @memberof RelationshipAllOf
     */
    updateBy?: string;
    /**
     * 
     * @type {number}
     * @memberof RelationshipAllOf
     */
    updateAt?: number;
    /**
     * 
     * @type {string}
     * @memberof RelationshipAllOf
     */
    sourceDomainCode?: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipAllOf
     */
    targetDomainCode?: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipAllOf
     */
    sourceResourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipAllOf
     */
    sourceResourcePropertyName?: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipAllOf
     */
    targetResourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipAllOf
     */
    targetResourcePropertyName?: string;
}
/**
 * 
 * @export
 * @interface RelationshipCreatable
 */
export interface RelationshipCreatable {
    /**
     * 
     * @type {number}
     * @memberof RelationshipCreatable
     */
    type: number;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof RelationshipCreatable
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof RelationshipCreatable
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipCreatable
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipCreatable
     */
    sourceDomainCode: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipCreatable
     */
    sourceResourceCode: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipCreatable
     */
    sourceResourcePropertyCode: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipCreatable
     */
    targetDomainCode: string;
    /**
     * 
     * @type {number}
     * @memberof RelationshipCreatable
     */
    targetResourceId: number;
    /**
     * 
     * @type {number}
     * @memberof RelationshipCreatable
     */
    targetResourcePropertyId: number;
}
/**
 * 
 * @export
 * @interface RelationshipUpdatable
 */
export interface RelationshipUpdatable {
    /**
     * 
     * @type {number}
     * @memberof RelationshipUpdatable
     */
    type: number;
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof RelationshipUpdatable
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof RelationshipUpdatable
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipUpdatable
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RelationshipUpdatable
     */
    sourceResourceId: number;
    /**
     * 
     * @type {number}
     * @memberof RelationshipUpdatable
     */
    sourceResourcePropertyId: number;
    /**
     * 
     * @type {number}
     * @memberof RelationshipUpdatable
     */
    targetResourceId: number;
    /**
     * 
     * @type {number}
     * @memberof RelationshipUpdatable
     */
    targetResourcePropertyId: number;
}
/**
 * 
 * @export
 * @interface ResourceApplication
 */
export interface ResourceApplication {
    /**
     * 
     * @type {number}
     * @memberof ResourceApplication
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceApplication
     */
    resourceDomainCode: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceApplication
     */
    applicant: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceApplication
     */
    account: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceApplication
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceApplication
     */
    description?: string;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof ResourceApplication
     */
    attachments?: Array<Attachment>;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceApplication
     */
    isGlobalDomain: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceApplication
     */
    onlyResourcesWithSelectedScope?: boolean;
    /**
     * 
     * @type {Array<PdcResourcePermission>}
     * @memberof ResourceApplication
     */
    resources: Array<PdcResourcePermission>;
    /**
     * 
     * @type {number}
     * @memberof ResourceApplication
     */
    status: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceApplication
     */
    comments: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceApplication
     */
    assignee: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceApplication
     */
    createAt: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ResourceAuthType {
    NOAUTHORIZED = 'NOAUTHORIZED',
    AUTHORIZED = 'AUTHORIZED',
    ALL = 'ALL'
}

/**
 * 
 * @export
 * @interface ResourceEngine
 */
export interface ResourceEngine {
    /**
     * 
     * @type {number}
     * @memberof ResourceEngine
     */
    id?: number;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof ResourceEngine
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngine
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngine
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngine
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngine
     */
    host?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngine
     */
    port?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngine
     */
    protocol?: string;
    /**
     * 
     * @type {object}
     * @memberof ResourceEngine
     */
    config?: object;
}
/**
 * 
 * @export
 * @interface ResourceEngineInstance
 */
export interface ResourceEngineInstance {
    /**
     * 
     * @type {number}
     * @memberof ResourceEngineInstance
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngineInstance
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceEngineInstance
     */
    status?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceEngineInstance
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceEngineInstance
     */
    resEngineId?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngineInstance
     */
    resEngineName?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngineInstance
     */
    resEngineType?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceEngineInstance
     */
    serviceName?: string;
}
/**
 * 
 * @export
 * @interface ResourceEngineInstanceUpdatable
 */
export interface ResourceEngineInstanceUpdatable {
    /**
     * 
     * @type {string}
     * @memberof ResourceEngineInstanceUpdatable
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceEngineInstanceUpdatable
     */
    level: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceEngineInstanceUpdatable
     */
    resEngineId?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ResourceType {
    PGTABLE = 'PG_TABLE',
    TSTABLE = 'TS_TABLE',
    GENERALFILE = 'GENERAL_FILE',
    BIMMODELFILE = 'BIM_MODEL_FILE',
    PGQUERYTABLE = 'PG_QUERY_TABLE'
}

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    description: string;
}
/**
 * 
 * @export
 * @interface Scope
 */
export interface Scope {
    /**
     * 
     * @type {number}
     * @memberof Scope
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    domainCode?: string;
    /**
     * 
     * @type {number}
     * @memberof Scope
     */
    resourceId: number;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    resourceCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof Scope
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Scope
     */
    displayPropertyId: number;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    displayPropertyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    displayPropertyName?: string;
    /**
     * 
     * @type {number}
     * @memberof Scope
     */
    filterOperator: number;
    /**
     * 
     * @type {Array<ScopeParameter>}
     * @memberof Scope
     */
    parameters?: Array<ScopeParameter>;
}
/**
 * 
 * @export
 * @interface ScopeParameter
 */
export interface ScopeParameter {
    /**
     * 编码是小写字母与数字、下划线组合，必须小写字母开头
     * @type {string}
     * @memberof ScopeParameter
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeParameter
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeParameter
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ScopeParameter
     */
    index: number;
}
/**
 * 
 * @export
 * @interface ScopeUpdatable
 */
export interface ScopeUpdatable {
    /**
     * 
     * @type {string}
     * @memberof ScopeUpdatable
     */
    account: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeUpdatable
     */
    domainCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ScopeUpdatable
     */
    resourceId: number;
    /**
     * 
     * @type {string}
     * @memberof ScopeUpdatable
     */
    code: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof ScopeUpdatable
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ScopeUpdatable
     */
    displayPropertyId: number;
    /**
     * 
     * @type {number}
     * @memberof ScopeUpdatable
     */
    filterOperator: number;
    /**
     * 
     * @type {Array<ScopeParameter>}
     * @memberof ScopeUpdatable
     */
    parameters: Array<ScopeParameter>;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    id: number;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Tag
     */
    children?: Array<Tag>;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    domainCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    fullPath?: string;
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    parentId: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    name: string;
}
/**
 * 
 * @export
 * @interface TagAllOf
 */
export interface TagAllOf {
    /**
     * 
     * @type {number}
     * @memberof TagAllOf
     */
    id: number;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof TagAllOf
     */
    children?: Array<Tag>;
    /**
     * 
     * @type {string}
     * @memberof TagAllOf
     */
    domainCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TagAllOf
     */
    fullPath?: string;
}
/**
 * 
 * @export
 * @interface TagTreeDomain
 */
export interface TagTreeDomain {
    /**
     * 
     * @type {string}
     * @memberof TagTreeDomain
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof TagTreeDomain
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TagTreeDomain
     */
    createBy?: string;
    /**
     * 
     * @type {Array<TagTreeResource>}
     * @memberof TagTreeDomain
     */
    tags?: Array<TagTreeResource>;
}
/**
 * 
 * @export
 * @interface TagTreeResource
 */
export interface TagTreeResource {
    /**
     * 
     * @type {number}
     * @memberof TagTreeResource
     */
    id: number;
    /**
     * 
     * @type {Array<PdcResource>}
     * @memberof TagTreeResource
     */
    resources?: Array<PdcResource>;
    /**
     * 
     * @type {Array<TagTreeResource>}
     * @memberof TagTreeResource
     */
    children?: Array<TagTreeResource>;
    /**
     * 
     * @type {string}
     * @memberof TagTreeResource
     */
    domainCode?: string;
    /**
     * 
     * @type {number}
     * @memberof TagTreeResource
     */
    parentId: number;
    /**
     * 
     * @type {string}
     * @memberof TagTreeResource
     */
    name: string;
}
/**
 * 
 * @export
 * @interface TagTreeResourceAllOf
 */
export interface TagTreeResourceAllOf {
    /**
     * 
     * @type {number}
     * @memberof TagTreeResourceAllOf
     */
    id: number;
    /**
     * 
     * @type {Array<PdcResource>}
     * @memberof TagTreeResourceAllOf
     */
    resources?: Array<PdcResource>;
    /**
     * 
     * @type {Array<TagTreeResource>}
     * @memberof TagTreeResourceAllOf
     */
    children?: Array<TagTreeResource>;
    /**
     * 
     * @type {string}
     * @memberof TagTreeResourceAllOf
     */
    domainCode?: string;
}
/**
 * 
 * @export
 * @interface TagUpdatable
 */
export interface TagUpdatable {
    /**
     * 
     * @type {number}
     * @memberof TagUpdatable
     */
    parentId: number;
    /**
     * 
     * @type {string}
     * @memberof TagUpdatable
     */
    name: string;
}
/**
 * 
 * @export
 * @interface TsPartitionParams
 */
export interface TsPartitionParams {
    /**
     * 
     * @type {Array<PdcResourceParameter>}
     * @memberof TsPartitionParams
     */
    parameters?: Array<PdcResourceParameter>;
}
/**
 * 
 * @export
 * @interface UpdateDomainParams
 */
export interface UpdateDomainParams {
    /**
     * 
     * @type {string}
     * @memberof UpdateDomainParams
     */
    account: string;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof UpdateDomainParams
     */
    name: string;
    /**
     * 英文名是大小写字母与数字、空格组合
     * @type {string}
     * @memberof UpdateDomainParams
     */
    alias: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDomainParams
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateDomainParams
     */
    visibility: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateDomainParams
     */
    scopes?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof UpdateDomainParams
     */
    norm: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateDomainParams
     */
    scopeInspect?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateDomainParams
     */
    allowDataExport?: boolean;
    /**
     * 
     * @type {object}
     * @memberof UpdateDomainParams
     */
    attributes?: object;
}
/**
 * 
 * @export
 * @interface UpdateResourceApplicationParams
 */
export interface UpdateResourceApplicationParams {
    /**
     * 
     * @type {ApprovalOption}
     * @memberof UpdateResourceApplicationParams
     */
    approvalOption: ApprovalOption;
    /**
     * 
     * @type {string}
     * @memberof UpdateResourceApplicationParams
     */
    comments: string;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    account?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {number}
     * @memberof View
     */
    id: number;
    /**
     * 当前视图所包含的视图结点
     * @type {Array<ViewNode>}
     * @memberof View
     */
    viewNodes?: Array<ViewNode>;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof View
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    description?: string;
    /**
     * 编码是小写字母与数字、下划线、中横线组合，必须小写字母开头
     * @type {string}
     * @memberof View
     */
    code: string;
}
/**
 * 
 * @export
 * @interface ViewAllOf
 */
export interface ViewAllOf {
    /**
     * 
     * @type {number}
     * @memberof ViewAllOf
     */
    id: number;
    /**
     * 当前视图所包含的视图结点
     * @type {Array<ViewNode>}
     * @memberof ViewAllOf
     */
    viewNodes?: Array<ViewNode>;
}
/**
 * 
 * @export
 * @interface ViewNode
 */
export interface ViewNode {
    /**
     * 
     * @type {number}
     * @memberof ViewNode
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ViewNode
     */
    viewId?: number;
    /**
     * 
     * @type {string}
     * @memberof ViewNode
     */
    fullPath?: string;
    /**
     * 
     * @type {string}
     * @memberof ViewNode
     */
    modelType?: string;
    /**
     * 
     * @type {Array<ViewNode>}
     * @memberof ViewNode
     */
    children?: Array<ViewNode>;
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof ViewNode
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ViewNode
     */
    description?: string;
    /**
     * 编码是小写字母与数字、下划线、中横线组合，必须小写字母开头
     * @type {string}
     * @memberof ViewNode
     */
    code: string;
    /**
     * 
     * @type {number}
     * @memberof ViewNode
     */
    type: number;
    /**
     * 
     * @type {ViewNodeFilter}
     * @memberof ViewNode
     */
    filter?: ViewNodeFilter;
    /**
     * 
     * @type {string}
     * @memberof ViewNode
     */
    modelDomainCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ViewNode
     */
    modelName?: string;
    /**
     * 
     * @type {number}
     * @memberof ViewNode
     */
    modelId?: number;
    /**
     * 
     * @type {number}
     * @memberof ViewNode
     */
    parentId?: number;
}
/**
 * 
 * @export
 * @interface ViewNodeAllOf
 */
export interface ViewNodeAllOf {
    /**
     * 
     * @type {number}
     * @memberof ViewNodeAllOf
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ViewNodeAllOf
     */
    viewId?: number;
    /**
     * 
     * @type {string}
     * @memberof ViewNodeAllOf
     */
    fullPath?: string;
    /**
     * 
     * @type {string}
     * @memberof ViewNodeAllOf
     */
    modelType?: string;
    /**
     * 
     * @type {Array<ViewNode>}
     * @memberof ViewNodeAllOf
     */
    children?: Array<ViewNode>;
}
/**
 * 模型对应的过滤条件
 * @export
 * @interface ViewNodeFilter
 */
export interface ViewNodeFilter {
    /**
     * 实体类模型选择的过滤索引
     * @type {string}
     * @memberof ViewNodeFilter
     */
    indexCode?: string;
    /**
     * 定义数据过滤条件
     * @type {Array<FilterOperation>}
     * @memberof ViewNodeFilter
     */
    filterList?: Array<FilterOperation>;
}
/**
 * 
 * @export
 * @interface ViewNodeUpdatable
 */
export interface ViewNodeUpdatable {
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof ViewNodeUpdatable
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ViewNodeUpdatable
     */
    description?: string;
    /**
     * 编码是小写字母与数字、下划线、中横线组合，必须小写字母开头
     * @type {string}
     * @memberof ViewNodeUpdatable
     */
    code: string;
    /**
     * 
     * @type {number}
     * @memberof ViewNodeUpdatable
     */
    type: number;
    /**
     * 
     * @type {ViewNodeFilter}
     * @memberof ViewNodeUpdatable
     */
    filter?: ViewNodeFilter;
    /**
     * 
     * @type {string}
     * @memberof ViewNodeUpdatable
     */
    modelDomainCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ViewNodeUpdatable
     */
    modelName?: string;
    /**
     * 
     * @type {number}
     * @memberof ViewNodeUpdatable
     */
    modelId?: number;
    /**
     * 
     * @type {number}
     * @memberof ViewNodeUpdatable
     */
    parentId?: number;
}
/**
 * 
 * @export
 * @interface ViewUpdatable
 */
export interface ViewUpdatable {
    /**
     * 用于显示，可读性强的名字，仅限长度
     * @type {string}
     * @memberof ViewUpdatable
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ViewUpdatable
     */
    description?: string;
    /**
     * 编码是小写字母与数字、下划线、中横线组合，必须小写字母开头
     * @type {string}
     * @memberof ViewUpdatable
     */
    code: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum VisibilityType {
    PRIVATE = 'PRIVATE',
    PUBLIC = 'PUBLIC',
    SHARE = 'SHARE'
}

/**
 * 
 * @export
 * @interface WarningResponse
 */
export interface WarningResponse {
    /**
     * 
     * @type {number}
     * @memberof WarningResponse
     */
    warningNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof WarningResponse
     */
    warningMessage?: string;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取用户信息
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(account: string, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getUserInfo.');
            }
            const localVarPath = `/users/accounts/{account}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据token获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByToken(options: any = {}): RequestArgs {
            const localVarPath = `/users/account`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取平台用户列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options: any = {}): RequestArgs {
            const localVarPath = `/users/accounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取用户信息
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(account: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo> {
            const localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).getUserInfo(account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据token获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByToken(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo> {
            const localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).getUserInfoByToken(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取平台用户列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserInfo>> {
            const localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).getUsers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取用户信息
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(account: string, options?: any): AxiosPromise<UserInfo> {
            return AccountApiFp(configuration).getUserInfo(account, options)(axios, basePath);
        },
        /**
         * 
         * @summary 根据token获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByToken(options?: any): AxiosPromise<UserInfo> {
            return AccountApiFp(configuration).getUserInfoByToken(options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取平台用户列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<UserInfo>> {
            return AccountApiFp(configuration).getUsers(options)(axios, basePath);
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @summary 获取用户信息
     * @param {string} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getUserInfo(account: string, options?: any) {
        return AccountApiFp(this.configuration).getUserInfo(account, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 根据token获取用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getUserInfoByToken(options?: any) {
        return AccountApiFp(this.configuration).getUserInfoByToken(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取平台用户列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getUsers(options?: any) {
        return AccountApiFp(this.configuration).getUsers(options)(this.axios, this.basePath);
    }

}


/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取管理应用详情
         * @param {string} apiKey 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppInfo(apiKey: string, account: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling getAppInfo.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getAppInfo.');
            }
            const localVarPath = `/apps/{apiKey}`
                .replace(`{${"apiKey"}}`, encodeURIComponent(String(apiKey)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取管理应用列表
         * @param {string} [account] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps(account?: string, pageNo?: number, pageSize?: number, options: any = {}): RequestArgs {
            const localVarPath = `/apps`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取管理应用详情
         * @param {string} apiKey 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppInfo(apiKey: string, account: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = ApplicationApiAxiosParamCreator(configuration).getAppInfo(apiKey, account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取管理应用列表
         * @param {string} [account] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps(account?: string, pageNo?: number, pageSize?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedApplication> {
            const localVarAxiosArgs = ApplicationApiAxiosParamCreator(configuration).listApps(account, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取管理应用详情
         * @param {string} apiKey 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppInfo(apiKey: string, account: string, options?: any): AxiosPromise<Application> {
            return ApplicationApiFp(configuration).getAppInfo(apiKey, account, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取管理应用列表
         * @param {string} [account] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps(account?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PagedApplication> {
            return ApplicationApiFp(configuration).listApps(account, pageNo, pageSize, options)(axios, basePath);
        },
    };
};

/**
 * ApplicationApi - object-oriented interface
 * @export
 * @class ApplicationApi
 * @extends {BaseAPI}
 */
export class ApplicationApi extends BaseAPI {
    /**
     * 
     * @summary 获取管理应用详情
     * @param {string} apiKey 
     * @param {string} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public getAppInfo(apiKey: string, account: string, options?: any) {
        return ApplicationApiFp(this.configuration).getAppInfo(apiKey, account, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取管理应用列表
     * @param {string} [account] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public listApps(account?: string, pageNo?: number, pageSize?: number, options?: any) {
        return ApplicationApiFp(this.configuration).listApps(account, pageNo, pageSize, options)(this.axios, this.basePath);
    }

}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 用户登录
         * @param {AuthRequest} [authRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authRequest?: AuthRequest, options: any = {}): RequestArgs {
            const localVarPath = `/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof authRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authRequest !== undefined ? authRequest : {}) : (authRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 用户登录
         * @param {AuthRequest} [authRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authRequest?: AuthRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).login(authRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 用户登录
         * @param {AuthRequest} [authRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authRequest?: AuthRequest, options?: any): AxiosPromise<AuthResponse> {
            return AuthApiFp(configuration).login(authRequest, options)(axios, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary 用户登录
     * @param {AuthRequest} [authRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(authRequest?: AuthRequest, options?: any) {
        return AuthApiFp(this.configuration).login(authRequest, options)(this.axios, this.basePath);
    }

}


/**
 * AuthAppCsDomainApi - axios parameter creator
 * @export
 */
export const AuthAppCsDomainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 绑定授权应用领域
         * @param {string} apiKey 
         * @param {BindAuthAppCsDomainParams} [bindAuthAppCsDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindAuthAppCsDomain(apiKey: string, bindAuthAppCsDomainParams?: BindAuthAppCsDomainParams, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling bindAuthAppCsDomain.');
            }
            const localVarPath = `/apps/{apiKey}/bindDomains`
                .replace(`{${"apiKey"}}`, encodeURIComponent(String(apiKey)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof bindAuthAppCsDomainParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bindAuthAppCsDomainParams !== undefined ? bindAuthAppCsDomainParams : {}) : (bindAuthAppCsDomainParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 解绑授权应用领域
         * @param {string} apiKey 
         * @param {number} bindDomainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthAppCsDomain(apiKey: string, bindDomainId: number, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling deleteAuthAppCsDomain.');
            }
            // verify required parameter 'bindDomainId' is not null or undefined
            if (bindDomainId === null || bindDomainId === undefined) {
                throw new RequiredError('bindDomainId','Required parameter bindDomainId was null or undefined when calling deleteAuthAppCsDomain.');
            }
            const localVarPath = `/apps/{apiKey}/bindDomains/{bindDomainId}`
                .replace(`{${"apiKey"}}`, encodeURIComponent(String(apiKey)))
                .replace(`{${"bindDomainId"}}`, encodeURIComponent(String(bindDomainId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取授权应用领域
         * @param {string} apiKey 
         * @param {number} bindDomainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthAppCsDomain(apiKey: string, bindDomainId: number, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling getAuthAppCsDomain.');
            }
            // verify required parameter 'bindDomainId' is not null or undefined
            if (bindDomainId === null || bindDomainId === undefined) {
                throw new RequiredError('bindDomainId','Required parameter bindDomainId was null or undefined when calling getAuthAppCsDomain.');
            }
            const localVarPath = `/apps/{apiKey}/bindDomains/{bindDomainId}`
                .replace(`{${"apiKey"}}`, encodeURIComponent(String(apiKey)))
                .replace(`{${"bindDomainId"}}`, encodeURIComponent(String(bindDomainId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取授权应用领域列表
         * @param {string} apiKey 
         * @param {string} [domainCode] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthAppCsDomains(apiKey: string, domainCode?: string, pageNo?: number, pageSize?: number, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling listAuthAppCsDomains.');
            }
            const localVarPath = `/apps/{apiKey}/bindDomains`
                .replace(`{${"apiKey"}}`, encodeURIComponent(String(apiKey)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (domainCode !== undefined) {
                localVarQueryParameter['domainCode'] = domainCode;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthAppCsDomainApi - functional programming interface
 * @export
 */
export const AuthAppCsDomainApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 绑定授权应用领域
         * @param {string} apiKey 
         * @param {BindAuthAppCsDomainParams} [bindAuthAppCsDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindAuthAppCsDomain(apiKey: string, bindAuthAppCsDomainParams?: BindAuthAppCsDomainParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAppCsDomain> {
            const localVarAxiosArgs = AuthAppCsDomainApiAxiosParamCreator(configuration).bindAuthAppCsDomain(apiKey, bindAuthAppCsDomainParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 解绑授权应用领域
         * @param {string} apiKey 
         * @param {number} bindDomainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthAppCsDomain(apiKey: string, bindDomainId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AuthAppCsDomainApiAxiosParamCreator(configuration).deleteAuthAppCsDomain(apiKey, bindDomainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取授权应用领域
         * @param {string} apiKey 
         * @param {number} bindDomainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthAppCsDomain(apiKey: string, bindDomainId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAppCsDomain> {
            const localVarAxiosArgs = AuthAppCsDomainApiAxiosParamCreator(configuration).getAuthAppCsDomain(apiKey, bindDomainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取授权应用领域列表
         * @param {string} apiKey 
         * @param {string} [domainCode] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthAppCsDomains(apiKey: string, domainCode?: string, pageNo?: number, pageSize?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedAuthAppCsDomain> {
            const localVarAxiosArgs = AuthAppCsDomainApiAxiosParamCreator(configuration).listAuthAppCsDomains(apiKey, domainCode, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthAppCsDomainApi - factory interface
 * @export
 */
export const AuthAppCsDomainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 绑定授权应用领域
         * @param {string} apiKey 
         * @param {BindAuthAppCsDomainParams} [bindAuthAppCsDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindAuthAppCsDomain(apiKey: string, bindAuthAppCsDomainParams?: BindAuthAppCsDomainParams, options?: any): AxiosPromise<AuthAppCsDomain> {
            return AuthAppCsDomainApiFp(configuration).bindAuthAppCsDomain(apiKey, bindAuthAppCsDomainParams, options)(axios, basePath);
        },
        /**
         * 
         * @summary 解绑授权应用领域
         * @param {string} apiKey 
         * @param {number} bindDomainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthAppCsDomain(apiKey: string, bindDomainId: number, options?: any): AxiosPromise<void> {
            return AuthAppCsDomainApiFp(configuration).deleteAuthAppCsDomain(apiKey, bindDomainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取授权应用领域
         * @param {string} apiKey 
         * @param {number} bindDomainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthAppCsDomain(apiKey: string, bindDomainId: number, options?: any): AxiosPromise<AuthAppCsDomain> {
            return AuthAppCsDomainApiFp(configuration).getAuthAppCsDomain(apiKey, bindDomainId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取授权应用领域列表
         * @param {string} apiKey 
         * @param {string} [domainCode] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthAppCsDomains(apiKey: string, domainCode?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PagedAuthAppCsDomain> {
            return AuthAppCsDomainApiFp(configuration).listAuthAppCsDomains(apiKey, domainCode, pageNo, pageSize, options)(axios, basePath);
        },
    };
};

/**
 * AuthAppCsDomainApi - object-oriented interface
 * @export
 * @class AuthAppCsDomainApi
 * @extends {BaseAPI}
 */
export class AuthAppCsDomainApi extends BaseAPI {
    /**
     * 
     * @summary 绑定授权应用领域
     * @param {string} apiKey 
     * @param {BindAuthAppCsDomainParams} [bindAuthAppCsDomainParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAppCsDomainApi
     */
    public bindAuthAppCsDomain(apiKey: string, bindAuthAppCsDomainParams?: BindAuthAppCsDomainParams, options?: any) {
        return AuthAppCsDomainApiFp(this.configuration).bindAuthAppCsDomain(apiKey, bindAuthAppCsDomainParams, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 解绑授权应用领域
     * @param {string} apiKey 
     * @param {number} bindDomainId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAppCsDomainApi
     */
    public deleteAuthAppCsDomain(apiKey: string, bindDomainId: number, options?: any) {
        return AuthAppCsDomainApiFp(this.configuration).deleteAuthAppCsDomain(apiKey, bindDomainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取授权应用领域
     * @param {string} apiKey 
     * @param {number} bindDomainId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAppCsDomainApi
     */
    public getAuthAppCsDomain(apiKey: string, bindDomainId: number, options?: any) {
        return AuthAppCsDomainApiFp(this.configuration).getAuthAppCsDomain(apiKey, bindDomainId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取授权应用领域列表
     * @param {string} apiKey 
     * @param {string} [domainCode] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAppCsDomainApi
     */
    public listAuthAppCsDomains(apiKey: string, domainCode?: string, pageNo?: number, pageSize?: number, options?: any) {
        return AuthAppCsDomainApiFp(this.configuration).listAuthAppCsDomains(apiKey, domainCode, pageNo, pageSize, options)(this.axios, this.basePath);
    }

}


/**
 * CSAPIApi - axios parameter creator
 * @export
 */
export const CSAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取Catalog Server API列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCSApi(options: any = {}): RequestArgs {
            const localVarPath = `/system/apis`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CSAPIApi - functional programming interface
 * @export
 */
export const CSAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取Catalog Server API列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCSApi(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiInfo>> {
            const localVarAxiosArgs = CSAPIApiAxiosParamCreator(configuration).listCSApi(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CSAPIApi - factory interface
 * @export
 */
export const CSAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取Catalog Server API列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCSApi(options?: any): AxiosPromise<Array<ApiInfo>> {
            return CSAPIApiFp(configuration).listCSApi(options)(axios, basePath);
        },
    };
};

/**
 * CSAPIApi - object-oriented interface
 * @export
 * @class CSAPIApi
 * @extends {BaseAPI}
 */
export class CSAPIApi extends BaseAPI {
    /**
     * 
     * @summary 获取Catalog Server API列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSAPIApi
     */
    public listCSApi(options?: any) {
        return CSAPIApiFp(this.configuration).listCSApi(options)(this.axios, this.basePath);
    }

}


/**
 * DatasourceConfigApi - axios parameter creator
 * @export
 */
export const DatasourceConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取资源的数据源配置信息
         * @param {string} account 
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceDatasourceConfig(account: string, domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getResourceDatasourceConfig.');
            }
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getResourceDatasourceConfig.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling getResourceDatasourceConfig.');
            }
            const localVarPath = `/users/accounts/{account}/domains/{domainCode}/resources/{resourceId}/datasourceConfig`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatasourceConfigApi - functional programming interface
 * @export
 */
export const DatasourceConfigApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取资源的数据源配置信息
         * @param {string} account 
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceDatasourceConfig(account: string, domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasourceConfig> {
            const localVarAxiosArgs = DatasourceConfigApiAxiosParamCreator(configuration).getResourceDatasourceConfig(account, domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DatasourceConfigApi - factory interface
 * @export
 */
export const DatasourceConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取资源的数据源配置信息
         * @param {string} account 
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceDatasourceConfig(account: string, domainCode: string, resourceId: number, options?: any): AxiosPromise<DatasourceConfig> {
            return DatasourceConfigApiFp(configuration).getResourceDatasourceConfig(account, domainCode, resourceId, options)(axios, basePath);
        },
    };
};

/**
 * DatasourceConfigApi - object-oriented interface
 * @export
 * @class DatasourceConfigApi
 * @extends {BaseAPI}
 */
export class DatasourceConfigApi extends BaseAPI {
    /**
     * 
     * @summary 获取资源的数据源配置信息
     * @param {string} account 
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasourceConfigApi
     */
    public getResourceDatasourceConfig(account: string, domainCode: string, resourceId: number, options?: any) {
        return DatasourceConfigApiFp(this.configuration).getResourceDatasourceConfig(account, domainCode, resourceId, options)(this.axios, this.basePath);
    }

}


/**
 * DomainApi - axios parameter creator
 * @export
 */
export const DomainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建领域
         * @param {CreateDomainParams} [createDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(createDomainParams?: CreateDomainParams, options: any = {}): RequestArgs {
            const localVarPath = `/domains`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof createDomainParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createDomainParams !== undefined ? createDomainParams : {}) : (createDomainParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除领域
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainCode: string, account: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteDomain.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling deleteDomain.');
            }
            const localVarPath = `/domains/{domainCode}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域详情
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainCode: string, account: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getDomain.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getDomain.');
            }
            const localVarPath = `/domains/{domainCode}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域列表
         * @param {string} [account] 
         * @param {string} [roleId] 
         * @param {boolean} [withDeleted] 
         * @param {AccessibleType} [accessibleType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(account?: string, roleId?: string, withDeleted?: boolean, accessibleType?: AccessibleType, options: any = {}): RequestArgs {
            const localVarPath = `/domains`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (withDeleted !== undefined) {
                localVarQueryParameter['withDeleted'] = withDeleted;
            }

            if (accessibleType !== undefined) {
                localVarQueryParameter['accessibleType'] = accessibleType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新领域
         * @param {string} domainCode 
         * @param {UpdateDomainParams} [updateDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainCode: string, updateDomainParams?: UpdateDomainParams, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateDomain.');
            }
            const localVarPath = `/domains/{domainCode}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof updateDomainParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateDomainParams !== undefined ? updateDomainParams : {}) : (updateDomainParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainApi - functional programming interface
 * @export
 */
export const DomainApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建领域
         * @param {CreateDomainParams} [createDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(createDomainParams?: CreateDomainParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).createDomain(createDomainParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除领域
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainCode: string, account: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).deleteDomain(domainCode, account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域详情
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainCode: string, account: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).getDomain(domainCode, account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域列表
         * @param {string} [account] 
         * @param {string} [roleId] 
         * @param {boolean} [withDeleted] 
         * @param {AccessibleType} [accessibleType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(account?: string, roleId?: string, withDeleted?: boolean, accessibleType?: AccessibleType, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedDomain> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).listDomains(account, roleId, withDeleted, accessibleType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新领域
         * @param {string} domainCode 
         * @param {UpdateDomainParams} [updateDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainCode: string, updateDomainParams?: UpdateDomainParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain> {
            const localVarAxiosArgs = DomainApiAxiosParamCreator(configuration).updateDomain(domainCode, updateDomainParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DomainApi - factory interface
 * @export
 */
export const DomainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建领域
         * @param {CreateDomainParams} [createDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(createDomainParams?: CreateDomainParams, options?: any): AxiosPromise<Domain> {
            return DomainApiFp(configuration).createDomain(createDomainParams, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除领域
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainCode: string, account: string, options?: any): AxiosPromise<void> {
            return DomainApiFp(configuration).deleteDomain(domainCode, account, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域详情
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainCode: string, account: string, options?: any): AxiosPromise<Domain> {
            return DomainApiFp(configuration).getDomain(domainCode, account, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域列表
         * @param {string} [account] 
         * @param {string} [roleId] 
         * @param {boolean} [withDeleted] 
         * @param {AccessibleType} [accessibleType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(account?: string, roleId?: string, withDeleted?: boolean, accessibleType?: AccessibleType, options?: any): AxiosPromise<PagedDomain> {
            return DomainApiFp(configuration).listDomains(account, roleId, withDeleted, accessibleType, options)(axios, basePath);
        },
        /**
         * 
         * @summary 更新领域
         * @param {string} domainCode 
         * @param {UpdateDomainParams} [updateDomainParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainCode: string, updateDomainParams?: UpdateDomainParams, options?: any): AxiosPromise<Domain> {
            return DomainApiFp(configuration).updateDomain(domainCode, updateDomainParams, options)(axios, basePath);
        },
    };
};

/**
 * DomainApi - object-oriented interface
 * @export
 * @class DomainApi
 * @extends {BaseAPI}
 */
export class DomainApi extends BaseAPI {
    /**
     * 
     * @summary 创建领域
     * @param {CreateDomainParams} [createDomainParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public createDomain(createDomainParams?: CreateDomainParams, options?: any) {
        return DomainApiFp(this.configuration).createDomain(createDomainParams, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除领域
     * @param {string} domainCode 
     * @param {string} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public deleteDomain(domainCode: string, account: string, options?: any) {
        return DomainApiFp(this.configuration).deleteDomain(domainCode, account, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域详情
     * @param {string} domainCode 
     * @param {string} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public getDomain(domainCode: string, account: string, options?: any) {
        return DomainApiFp(this.configuration).getDomain(domainCode, account, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域列表
     * @param {string} [account] 
     * @param {string} [roleId] 
     * @param {boolean} [withDeleted] 
     * @param {AccessibleType} [accessibleType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public listDomains(account?: string, roleId?: string, withDeleted?: boolean, accessibleType?: AccessibleType, options?: any) {
        return DomainApiFp(this.configuration).listDomains(account, roleId, withDeleted, accessibleType, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 更新领域
     * @param {string} domainCode 
     * @param {UpdateDomainParams} [updateDomainParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public updateDomain(domainCode: string, updateDomainParams?: UpdateDomainParams, options?: any) {
        return DomainApiFp(this.configuration).updateDomain(domainCode, updateDomainParams, options)(this.axios, this.basePath);
    }

}


/**
 * DomainEngineInstanceApi - axios parameter creator
 * @export
 */
export const DomainEngineInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建领域引擎实例绑定
         * @param {string} domainCode 
         * @param {DomainEngineInstanceUpdatable} [domainEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainEngineInstance(domainCode: string, domainEngineInstanceUpdatable?: DomainEngineInstanceUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createDomainEngineInstance.');
            }
            const localVarPath = `/domains/{domainCode}/engine-instances`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof domainEngineInstanceUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(domainEngineInstanceUpdatable !== undefined ? domainEngineInstanceUpdatable : {}) : (domainEngineInstanceUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域引擎实例详情
         * @param {string} domainCode 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainEngineInstance(domainCode: string, instanceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getDomainEngineInstance.');
            }
            // verify required parameter 'instanceId' is not null or undefined
            if (instanceId === null || instanceId === undefined) {
                throw new RequiredError('instanceId','Required parameter instanceId was null or undefined when calling getDomainEngineInstance.');
            }
            const localVarPath = `/domains/{domainCode}/engine-instances/{instanceId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域引擎实例绑定列表
         * @param {string} domainCode 
         * @param {string} [resourceType] 按资源类型查询，如：pg_table | ts_table | pdf_file ...
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainEngineInstances(domainCode: string, resourceType?: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listDomainEngineInstances.');
            }
            const localVarPath = `/domains/{domainCode}/engine-instances`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainEngineInstanceApi - functional programming interface
 * @export
 */
export const DomainEngineInstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建领域引擎实例绑定
         * @param {string} domainCode 
         * @param {DomainEngineInstanceUpdatable} [domainEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainEngineInstance(domainCode: string, domainEngineInstanceUpdatable?: DomainEngineInstanceUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceEngineInstance> {
            const localVarAxiosArgs = DomainEngineInstanceApiAxiosParamCreator(configuration).createDomainEngineInstance(domainCode, domainEngineInstanceUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域引擎实例详情
         * @param {string} domainCode 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainEngineInstance(domainCode: string, instanceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceEngineInstance> {
            const localVarAxiosArgs = DomainEngineInstanceApiAxiosParamCreator(configuration).getDomainEngineInstance(domainCode, instanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域引擎实例绑定列表
         * @param {string} domainCode 
         * @param {string} [resourceType] 按资源类型查询，如：pg_table | ts_table | pdf_file ...
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainEngineInstances(domainCode: string, resourceType?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResourceEngineInstance> {
            const localVarAxiosArgs = DomainEngineInstanceApiAxiosParamCreator(configuration).listDomainEngineInstances(domainCode, resourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DomainEngineInstanceApi - factory interface
 * @export
 */
export const DomainEngineInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建领域引擎实例绑定
         * @param {string} domainCode 
         * @param {DomainEngineInstanceUpdatable} [domainEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainEngineInstance(domainCode: string, domainEngineInstanceUpdatable?: DomainEngineInstanceUpdatable, options?: any): AxiosPromise<ResourceEngineInstance> {
            return DomainEngineInstanceApiFp(configuration).createDomainEngineInstance(domainCode, domainEngineInstanceUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域引擎实例详情
         * @param {string} domainCode 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainEngineInstance(domainCode: string, instanceId: number, options?: any): AxiosPromise<ResourceEngineInstance> {
            return DomainEngineInstanceApiFp(configuration).getDomainEngineInstance(domainCode, instanceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域引擎实例绑定列表
         * @param {string} domainCode 
         * @param {string} [resourceType] 按资源类型查询，如：pg_table | ts_table | pdf_file ...
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainEngineInstances(domainCode: string, resourceType?: string, options?: any): AxiosPromise<PagedResourceEngineInstance> {
            return DomainEngineInstanceApiFp(configuration).listDomainEngineInstances(domainCode, resourceType, options)(axios, basePath);
        },
    };
};

/**
 * DomainEngineInstanceApi - object-oriented interface
 * @export
 * @class DomainEngineInstanceApi
 * @extends {BaseAPI}
 */
export class DomainEngineInstanceApi extends BaseAPI {
    /**
     * 
     * @summary 创建领域引擎实例绑定
     * @param {string} domainCode 
     * @param {DomainEngineInstanceUpdatable} [domainEngineInstanceUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainEngineInstanceApi
     */
    public createDomainEngineInstance(domainCode: string, domainEngineInstanceUpdatable?: DomainEngineInstanceUpdatable, options?: any) {
        return DomainEngineInstanceApiFp(this.configuration).createDomainEngineInstance(domainCode, domainEngineInstanceUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域引擎实例详情
     * @param {string} domainCode 
     * @param {number} instanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainEngineInstanceApi
     */
    public getDomainEngineInstance(domainCode: string, instanceId: number, options?: any) {
        return DomainEngineInstanceApiFp(this.configuration).getDomainEngineInstance(domainCode, instanceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域引擎实例绑定列表
     * @param {string} domainCode 
     * @param {string} [resourceType] 按资源类型查询，如：pg_table | ts_table | pdf_file ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainEngineInstanceApi
     */
    public listDomainEngineInstances(domainCode: string, resourceType?: string, options?: any) {
        return DomainEngineInstanceApiFp(this.configuration).listDomainEngineInstances(domainCode, resourceType, options)(this.axios, this.basePath);
    }

}


/**
 * DomainMemberApi - axios parameter creator
 * @export
 */
export const DomainMemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域成员
         * @param {string} domainCode 
         * @param {DomainMemberUpdatable} [domainMemberUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDomainMember(domainCode: string, domainMemberUpdatable?: DomainMemberUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling addDomainMember.');
            }
            const localVarPath = `/domains/{domainCode}/members`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof domainMemberUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(domainMemberUpdatable !== undefined ? domainMemberUpdatable : {}) : (domainMemberUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainMember(domainCode: string, account: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteDomainMember.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling deleteDomainMember.');
            }
            const localVarPath = `/domains/{domainCode}/members/{account}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainMember(domainCode: string, account: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getDomainMember.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getDomainMember.');
            }
            const localVarPath = `/domains/{domainCode}/members/{account}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域成员列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainMembers(domainCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listDomainMembers.');
            }
            const localVarPath = `/domains/{domainCode}/members`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {DomainMemberUpdatable} [domainMemberUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainMember(domainCode: string, account: string, domainMemberUpdatable?: DomainMemberUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateDomainMember.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling updateDomainMember.');
            }
            const localVarPath = `/domains/{domainCode}/members/{account}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof domainMemberUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(domainMemberUpdatable !== undefined ? domainMemberUpdatable : {}) : (domainMemberUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainMemberApi - functional programming interface
 * @export
 */
export const DomainMemberApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域成员
         * @param {string} domainCode 
         * @param {DomainMemberUpdatable} [domainMemberUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDomainMember(domainCode: string, domainMemberUpdatable?: DomainMemberUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainMember> {
            const localVarAxiosArgs = DomainMemberApiAxiosParamCreator(configuration).addDomainMember(domainCode, domainMemberUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainMember(domainCode: string, account: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DomainMemberApiAxiosParamCreator(configuration).deleteDomainMember(domainCode, account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainMember(domainCode: string, account: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainMember> {
            const localVarAxiosArgs = DomainMemberApiAxiosParamCreator(configuration).getDomainMember(domainCode, account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域成员列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainMembers(domainCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedDomainMember> {
            const localVarAxiosArgs = DomainMemberApiAxiosParamCreator(configuration).listDomainMembers(domainCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {DomainMemberUpdatable} [domainMemberUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainMember(domainCode: string, account: string, domainMemberUpdatable?: DomainMemberUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainMember> {
            const localVarAxiosArgs = DomainMemberApiAxiosParamCreator(configuration).updateDomainMember(domainCode, account, domainMemberUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DomainMemberApi - factory interface
 * @export
 */
export const DomainMemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加领域成员
         * @param {string} domainCode 
         * @param {DomainMemberUpdatable} [domainMemberUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDomainMember(domainCode: string, domainMemberUpdatable?: DomainMemberUpdatable, options?: any): AxiosPromise<DomainMember> {
            return DomainMemberApiFp(configuration).addDomainMember(domainCode, domainMemberUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainMember(domainCode: string, account: string, options?: any): AxiosPromise<void> {
            return DomainMemberApiFp(configuration).deleteDomainMember(domainCode, account, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainMember(domainCode: string, account: string, options?: any): AxiosPromise<DomainMember> {
            return DomainMemberApiFp(configuration).getDomainMember(domainCode, account, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域成员列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainMembers(domainCode: string, options?: any): AxiosPromise<PagedDomainMember> {
            return DomainMemberApiFp(configuration).listDomainMembers(domainCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 修改领域成员
         * @param {string} domainCode 
         * @param {string} account 
         * @param {DomainMemberUpdatable} [domainMemberUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainMember(domainCode: string, account: string, domainMemberUpdatable?: DomainMemberUpdatable, options?: any): AxiosPromise<DomainMember> {
            return DomainMemberApiFp(configuration).updateDomainMember(domainCode, account, domainMemberUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * DomainMemberApi - object-oriented interface
 * @export
 * @class DomainMemberApi
 * @extends {BaseAPI}
 */
export class DomainMemberApi extends BaseAPI {
    /**
     * 
     * @summary 添加领域成员
     * @param {string} domainCode 
     * @param {DomainMemberUpdatable} [domainMemberUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainMemberApi
     */
    public addDomainMember(domainCode: string, domainMemberUpdatable?: DomainMemberUpdatable, options?: any) {
        return DomainMemberApiFp(this.configuration).addDomainMember(domainCode, domainMemberUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除领域成员
     * @param {string} domainCode 
     * @param {string} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainMemberApi
     */
    public deleteDomainMember(domainCode: string, account: string, options?: any) {
        return DomainMemberApiFp(this.configuration).deleteDomainMember(domainCode, account, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域成员
     * @param {string} domainCode 
     * @param {string} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainMemberApi
     */
    public getDomainMember(domainCode: string, account: string, options?: any) {
        return DomainMemberApiFp(this.configuration).getDomainMember(domainCode, account, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域成员列表
     * @param {string} domainCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainMemberApi
     */
    public listDomainMembers(domainCode: string, options?: any) {
        return DomainMemberApiFp(this.configuration).listDomainMembers(domainCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 修改领域成员
     * @param {string} domainCode 
     * @param {string} account 
     * @param {DomainMemberUpdatable} [domainMemberUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainMemberApi
     */
    public updateDomainMember(domainCode: string, account: string, domainMemberUpdatable?: DomainMemberUpdatable, options?: any) {
        return DomainMemberApiFp(this.configuration).updateDomainMember(domainCode, account, domainMemberUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * EngineInstanceApi - axios parameter creator
 * @export
 */
export const EngineInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建资源引擎实例
         * @param {string} account 
         * @param {ResourceEngineInstanceUpdatable} [resourceEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceEngineInstance(account: string, resourceEngineInstanceUpdatable?: ResourceEngineInstanceUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling createResourceEngineInstance.');
            }
            const localVarPath = `/users/accounts/{account}/engine-instances`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof resourceEngineInstanceUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resourceEngineInstanceUpdatable !== undefined ? resourceEngineInstanceUpdatable : {}) : (resourceEngineInstanceUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除资源引擎实例
         * @param {string} account 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEngineInstance(account: string, instanceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling deleteResourceEngineInstance.');
            }
            // verify required parameter 'instanceId' is not null or undefined
            if (instanceId === null || instanceId === undefined) {
                throw new RequiredError('instanceId','Required parameter instanceId was null or undefined when calling deleteResourceEngineInstance.');
            }
            const localVarPath = `/users/accounts/{account}/engine-instances/{instanceId}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 Resource Engine Instance 详情
         * @param {string} account 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEngineInstance(account: string, instanceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getResourceEngineInstance.');
            }
            // verify required parameter 'instanceId' is not null or undefined
            if (instanceId === null || instanceId === undefined) {
                throw new RequiredError('instanceId','Required parameter instanceId was null or undefined when calling getResourceEngineInstance.');
            }
            const localVarPath = `/users/accounts/{account}/engine-instances/{instanceId}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户的资源引擎实例列表
         * @param {string} account 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceEngineInstances(account: string, status?: number, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling listResourceEngineInstances.');
            }
            const localVarPath = `/users/accounts/{account}/engine-instances`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改资源引擎实例
         * @param {string} account 
         * @param {number} instanceId 
         * @param {ResourceEngineInstanceUpdatable} [resourceEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceEngineInstance(account: string, instanceId: number, resourceEngineInstanceUpdatable?: ResourceEngineInstanceUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling updateResourceEngineInstance.');
            }
            // verify required parameter 'instanceId' is not null or undefined
            if (instanceId === null || instanceId === undefined) {
                throw new RequiredError('instanceId','Required parameter instanceId was null or undefined when calling updateResourceEngineInstance.');
            }
            const localVarPath = `/users/accounts/{account}/engine-instances/{instanceId}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof resourceEngineInstanceUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resourceEngineInstanceUpdatable !== undefined ? resourceEngineInstanceUpdatable : {}) : (resourceEngineInstanceUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EngineInstanceApi - functional programming interface
 * @export
 */
export const EngineInstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建资源引擎实例
         * @param {string} account 
         * @param {ResourceEngineInstanceUpdatable} [resourceEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceEngineInstance(account: string, resourceEngineInstanceUpdatable?: ResourceEngineInstanceUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceEngineInstance> {
            const localVarAxiosArgs = EngineInstanceApiAxiosParamCreator(configuration).createResourceEngineInstance(account, resourceEngineInstanceUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除资源引擎实例
         * @param {string} account 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEngineInstance(account: string, instanceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = EngineInstanceApiAxiosParamCreator(configuration).deleteResourceEngineInstance(account, instanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 Resource Engine Instance 详情
         * @param {string} account 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEngineInstance(account: string, instanceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceEngineInstance> {
            const localVarAxiosArgs = EngineInstanceApiAxiosParamCreator(configuration).getResourceEngineInstance(account, instanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户的资源引擎实例列表
         * @param {string} account 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceEngineInstances(account: string, status?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResourceEngineInstance> {
            const localVarAxiosArgs = EngineInstanceApiAxiosParamCreator(configuration).listResourceEngineInstances(account, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改资源引擎实例
         * @param {string} account 
         * @param {number} instanceId 
         * @param {ResourceEngineInstanceUpdatable} [resourceEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceEngineInstance(account: string, instanceId: number, resourceEngineInstanceUpdatable?: ResourceEngineInstanceUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceEngineInstance> {
            const localVarAxiosArgs = EngineInstanceApiAxiosParamCreator(configuration).updateResourceEngineInstance(account, instanceId, resourceEngineInstanceUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EngineInstanceApi - factory interface
 * @export
 */
export const EngineInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建资源引擎实例
         * @param {string} account 
         * @param {ResourceEngineInstanceUpdatable} [resourceEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceEngineInstance(account: string, resourceEngineInstanceUpdatable?: ResourceEngineInstanceUpdatable, options?: any): AxiosPromise<ResourceEngineInstance> {
            return EngineInstanceApiFp(configuration).createResourceEngineInstance(account, resourceEngineInstanceUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除资源引擎实例
         * @param {string} account 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceEngineInstance(account: string, instanceId: number, options?: any): AxiosPromise<void> {
            return EngineInstanceApiFp(configuration).deleteResourceEngineInstance(account, instanceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取 Resource Engine Instance 详情
         * @param {string} account 
         * @param {number} instanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceEngineInstance(account: string, instanceId: number, options?: any): AxiosPromise<ResourceEngineInstance> {
            return EngineInstanceApiFp(configuration).getResourceEngineInstance(account, instanceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取用户的资源引擎实例列表
         * @param {string} account 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceEngineInstances(account: string, status?: number, options?: any): AxiosPromise<PagedResourceEngineInstance> {
            return EngineInstanceApiFp(configuration).listResourceEngineInstances(account, status, options)(axios, basePath);
        },
        /**
         * 
         * @summary 修改资源引擎实例
         * @param {string} account 
         * @param {number} instanceId 
         * @param {ResourceEngineInstanceUpdatable} [resourceEngineInstanceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceEngineInstance(account: string, instanceId: number, resourceEngineInstanceUpdatable?: ResourceEngineInstanceUpdatable, options?: any): AxiosPromise<ResourceEngineInstance> {
            return EngineInstanceApiFp(configuration).updateResourceEngineInstance(account, instanceId, resourceEngineInstanceUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * EngineInstanceApi - object-oriented interface
 * @export
 * @class EngineInstanceApi
 * @extends {BaseAPI}
 */
export class EngineInstanceApi extends BaseAPI {
    /**
     * 
     * @summary 创建资源引擎实例
     * @param {string} account 
     * @param {ResourceEngineInstanceUpdatable} [resourceEngineInstanceUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineInstanceApi
     */
    public createResourceEngineInstance(account: string, resourceEngineInstanceUpdatable?: ResourceEngineInstanceUpdatable, options?: any) {
        return EngineInstanceApiFp(this.configuration).createResourceEngineInstance(account, resourceEngineInstanceUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除资源引擎实例
     * @param {string} account 
     * @param {number} instanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineInstanceApi
     */
    public deleteResourceEngineInstance(account: string, instanceId: number, options?: any) {
        return EngineInstanceApiFp(this.configuration).deleteResourceEngineInstance(account, instanceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取 Resource Engine Instance 详情
     * @param {string} account 
     * @param {number} instanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineInstanceApi
     */
    public getResourceEngineInstance(account: string, instanceId: number, options?: any) {
        return EngineInstanceApiFp(this.configuration).getResourceEngineInstance(account, instanceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取用户的资源引擎实例列表
     * @param {string} account 
     * @param {number} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineInstanceApi
     */
    public listResourceEngineInstances(account: string, status?: number, options?: any) {
        return EngineInstanceApiFp(this.configuration).listResourceEngineInstances(account, status, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 修改资源引擎实例
     * @param {string} account 
     * @param {number} instanceId 
     * @param {ResourceEngineInstanceUpdatable} [resourceEngineInstanceUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EngineInstanceApi
     */
    public updateResourceEngineInstance(account: string, instanceId: number, resourceEngineInstanceUpdatable?: ResourceEngineInstanceUpdatable, options?: any) {
        return EngineInstanceApiFp(this.configuration).updateResourceEngineInstance(account, instanceId, resourceEngineInstanceUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * EntityTypesTreeApi - axios parameter creator
 * @export
 */
export const EntityTypesTreeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取实体类型树
         * @param {string} [engineType] 
         * @param {string} [superType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTypesTree(engineType?: string, superType?: string, options: any = {}): RequestArgs {
            const localVarPath = `/trees/entity-types-tree`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (engineType !== undefined) {
                localVarQueryParameter['engineType'] = engineType;
            }

            if (superType !== undefined) {
                localVarQueryParameter['superType'] = superType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntityTypesTreeApi - functional programming interface
 * @export
 */
export const EntityTypesTreeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取实体类型树
         * @param {string} [engineType] 
         * @param {string} [superType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTypesTree(engineType?: string, superType?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedEntityTypeTree> {
            const localVarAxiosArgs = EntityTypesTreeApiAxiosParamCreator(configuration).getEntityTypesTree(engineType, superType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EntityTypesTreeApi - factory interface
 * @export
 */
export const EntityTypesTreeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取实体类型树
         * @param {string} [engineType] 
         * @param {string} [superType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTypesTree(engineType?: string, superType?: string, options?: any): AxiosPromise<PagedEntityTypeTree> {
            return EntityTypesTreeApiFp(configuration).getEntityTypesTree(engineType, superType, options)(axios, basePath);
        },
    };
};

/**
 * EntityTypesTreeApi - object-oriented interface
 * @export
 * @class EntityTypesTreeApi
 * @extends {BaseAPI}
 */
export class EntityTypesTreeApi extends BaseAPI {
    /**
     * 
     * @summary 获取实体类型树
     * @param {string} [engineType] 
     * @param {string} [superType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityTypesTreeApi
     */
    public getEntityTypesTree(engineType?: string, superType?: string, options?: any) {
        return EntityTypesTreeApiFp(this.configuration).getEntityTypesTree(engineType, superType, options)(this.axios, this.basePath);
    }

}


/**
 * EnumTypeApi - axios parameter creator
 * @export
 */
export const EnumTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建枚举类型
         * @param {EnumTypeUpdatable} [enumTypeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnumType(enumTypeUpdatable?: EnumTypeUpdatable, options: any = {}): RequestArgs {
            const localVarPath = `/system/enum-types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof enumTypeUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enumTypeUpdatable !== undefined ? enumTypeUpdatable : {}) : (enumTypeUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除枚举类型
         * @param {string} enumCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnumType(enumCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'enumCode' is not null or undefined
            if (enumCode === null || enumCode === undefined) {
                throw new RequiredError('enumCode','Required parameter enumCode was null or undefined when calling deleteEnumType.');
            }
            const localVarPath = `/system/enum-types/{enumCode}`
                .replace(`{${"enumCode"}}`, encodeURIComponent(String(enumCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取枚举类型详情
         * @param {string} enumCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumType(enumCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'enumCode' is not null or undefined
            if (enumCode === null || enumCode === undefined) {
                throw new RequiredError('enumCode','Required parameter enumCode was null or undefined when calling getEnumType.');
            }
            const localVarPath = `/system/enum-types/{enumCode}`
                .replace(`{${"enumCode"}}`, encodeURIComponent(String(enumCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改枚举类型
         * @param {string} enumCode 
         * @param {EnumTypeUpdatable} [enumTypeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumType(enumCode: string, enumTypeUpdatable?: EnumTypeUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'enumCode' is not null or undefined
            if (enumCode === null || enumCode === undefined) {
                throw new RequiredError('enumCode','Required parameter enumCode was null or undefined when calling updateEnumType.');
            }
            const localVarPath = `/system/enum-types/{enumCode}`
                .replace(`{${"enumCode"}}`, encodeURIComponent(String(enumCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof enumTypeUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enumTypeUpdatable !== undefined ? enumTypeUpdatable : {}) : (enumTypeUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnumTypeApi - functional programming interface
 * @export
 */
export const EnumTypeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建枚举类型
         * @param {EnumTypeUpdatable} [enumTypeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnumType(enumTypeUpdatable?: EnumTypeUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnumType> {
            const localVarAxiosArgs = EnumTypeApiAxiosParamCreator(configuration).createEnumType(enumTypeUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除枚举类型
         * @param {string} enumCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnumType(enumCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = EnumTypeApiAxiosParamCreator(configuration).deleteEnumType(enumCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取枚举类型详情
         * @param {string} enumCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumType(enumCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnumType> {
            const localVarAxiosArgs = EnumTypeApiAxiosParamCreator(configuration).getEnumType(enumCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改枚举类型
         * @param {string} enumCode 
         * @param {EnumTypeUpdatable} [enumTypeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumType(enumCode: string, enumTypeUpdatable?: EnumTypeUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnumType> {
            const localVarAxiosArgs = EnumTypeApiAxiosParamCreator(configuration).updateEnumType(enumCode, enumTypeUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnumTypeApi - factory interface
 * @export
 */
export const EnumTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建枚举类型
         * @param {EnumTypeUpdatable} [enumTypeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnumType(enumTypeUpdatable?: EnumTypeUpdatable, options?: any): AxiosPromise<EnumType> {
            return EnumTypeApiFp(configuration).createEnumType(enumTypeUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除枚举类型
         * @param {string} enumCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnumType(enumCode: string, options?: any): AxiosPromise<void> {
            return EnumTypeApiFp(configuration).deleteEnumType(enumCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取枚举类型详情
         * @param {string} enumCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumType(enumCode: string, options?: any): AxiosPromise<EnumType> {
            return EnumTypeApiFp(configuration).getEnumType(enumCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 修改枚举类型
         * @param {string} enumCode 
         * @param {EnumTypeUpdatable} [enumTypeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumType(enumCode: string, enumTypeUpdatable?: EnumTypeUpdatable, options?: any): AxiosPromise<EnumType> {
            return EnumTypeApiFp(configuration).updateEnumType(enumCode, enumTypeUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * EnumTypeApi - object-oriented interface
 * @export
 * @class EnumTypeApi
 * @extends {BaseAPI}
 */
export class EnumTypeApi extends BaseAPI {
    /**
     * 
     * @summary 创建枚举类型
     * @param {EnumTypeUpdatable} [enumTypeUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumTypeApi
     */
    public createEnumType(enumTypeUpdatable?: EnumTypeUpdatable, options?: any) {
        return EnumTypeApiFp(this.configuration).createEnumType(enumTypeUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除枚举类型
     * @param {string} enumCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumTypeApi
     */
    public deleteEnumType(enumCode: string, options?: any) {
        return EnumTypeApiFp(this.configuration).deleteEnumType(enumCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取枚举类型详情
     * @param {string} enumCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumTypeApi
     */
    public getEnumType(enumCode: string, options?: any) {
        return EnumTypeApiFp(this.configuration).getEnumType(enumCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 修改枚举类型
     * @param {string} enumCode 
     * @param {EnumTypeUpdatable} [enumTypeUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumTypeApi
     */
    public updateEnumType(enumCode: string, enumTypeUpdatable?: EnumTypeUpdatable, options?: any) {
        return EnumTypeApiFp(this.configuration).updateEnumType(enumCode, enumTypeUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * EnumTypesApi - axios parameter creator
 * @export
 */
export const EnumTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取枚举类型
         * @param {string} [type] 实体类型编码。根据实体定义的关联查询枚举定义，参数type 和 relation需同时指定
         * @param {string} [relation] 实体与枚举定义的关联类型。根据实体定义的关联查询枚举定义，参数type 和 relation需同时指定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumTypes(type?: string, relation?: string, options: any = {}): RequestArgs {
            const localVarPath = `/system/enum-types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnumTypesApi - functional programming interface
 * @export
 */
export const EnumTypesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取枚举类型
         * @param {string} [type] 实体类型编码。根据实体定义的关联查询枚举定义，参数type 和 relation需同时指定
         * @param {string} [relation] 实体与枚举定义的关联类型。根据实体定义的关联查询枚举定义，参数type 和 relation需同时指定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumTypes(type?: string, relation?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedEnumType> {
            const localVarAxiosArgs = EnumTypesApiAxiosParamCreator(configuration).getEnumTypes(type, relation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnumTypesApi - factory interface
 * @export
 */
export const EnumTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取枚举类型
         * @param {string} [type] 实体类型编码。根据实体定义的关联查询枚举定义，参数type 和 relation需同时指定
         * @param {string} [relation] 实体与枚举定义的关联类型。根据实体定义的关联查询枚举定义，参数type 和 relation需同时指定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumTypes(type?: string, relation?: string, options?: any): AxiosPromise<PagedEnumType> {
            return EnumTypesApiFp(configuration).getEnumTypes(type, relation, options)(axios, basePath);
        },
    };
};

/**
 * EnumTypesApi - object-oriented interface
 * @export
 * @class EnumTypesApi
 * @extends {BaseAPI}
 */
export class EnumTypesApi extends BaseAPI {
    /**
     * 
     * @summary 获取枚举类型
     * @param {string} [type] 实体类型编码。根据实体定义的关联查询枚举定义，参数type 和 relation需同时指定
     * @param {string} [relation] 实体与枚举定义的关联类型。根据实体定义的关联查询枚举定义，参数type 和 relation需同时指定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumTypesApi
     */
    public getEnumTypes(type?: string, relation?: string, options?: any) {
        return EnumTypesApiFp(this.configuration).getEnumTypes(type, relation, options)(this.axios, this.basePath);
    }

}


/**
 * ExtensionApi - axios parameter creator
 * @export
 */
export const ExtensionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 申请文件上传的Policy
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {PolicyRequest} [policyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyPolicy(domainCode: string, datasetId: number, policyRequest?: PolicyRequest, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling applyPolicy.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling applyPolicy.');
            }
            const localVarPath = `/extension/domains/{domainCode}/datasets/{datasetId}/policy`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof policyRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(policyRequest !== undefined ? policyRequest : {}) : (policyRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExtensionApi - functional programming interface
 * @export
 */
export const ExtensionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 申请文件上传的Policy
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {PolicyRequest} [policyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyPolicy(domainCode: string, datasetId: number, policyRequest?: PolicyRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ExtensionApiAxiosParamCreator(configuration).applyPolicy(domainCode, datasetId, policyRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExtensionApi - factory interface
 * @export
 */
export const ExtensionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 申请文件上传的Policy
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {PolicyRequest} [policyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyPolicy(domainCode: string, datasetId: number, policyRequest?: PolicyRequest, options?: any): AxiosPromise<string> {
            return ExtensionApiFp(configuration).applyPolicy(domainCode, datasetId, policyRequest, options)(axios, basePath);
        },
    };
};

/**
 * ExtensionApi - object-oriented interface
 * @export
 * @class ExtensionApi
 * @extends {BaseAPI}
 */
export class ExtensionApi extends BaseAPI {
    /**
     * 
     * @summary 申请文件上传的Policy
     * @param {string} domainCode 
     * @param {number} datasetId 
     * @param {PolicyRequest} [policyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtensionApi
     */
    public applyPolicy(domainCode: string, datasetId: number, policyRequest?: PolicyRequest, options?: any) {
        return ExtensionApiFp(this.configuration).applyPolicy(domainCode, datasetId, policyRequest, options)(this.axios, this.basePath);
    }

}


/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 导入文件
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {FileUpdatable} [fileUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importFile(domainCode: string, resourceId: number, fileUpdatable?: FileUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling importFile.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling importFile.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/files`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof fileUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(fileUpdatable !== undefined ? fileUpdatable : {}) : (fileUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 导入文件
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {FileUpdatable} [fileUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importFile(domainCode: string, resourceId: number, fileUpdatable?: FileUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = FileApiAxiosParamCreator(configuration).importFile(domainCode, resourceId, fileUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 导入文件
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {FileUpdatable} [fileUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importFile(domainCode: string, resourceId: number, fileUpdatable?: FileUpdatable, options?: any): AxiosPromise<void> {
            return FileApiFp(configuration).importFile(domainCode, resourceId, fileUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @summary 导入文件
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {FileUpdatable} [fileUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public importFile(domainCode: string, resourceId: number, fileUpdatable?: FileUpdatable, options?: any) {
        return FileApiFp(this.configuration).importFile(domainCode, resourceId, fileUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * ProcessApi - axios parameter creator
 * @export
 */
export const ProcessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建一个数据处理Process资源
         * @param {string} domainCode 
         * @param {ProcessResourceUpdatable} [processResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessResource(domainCode: string, processResourceUpdatable?: ProcessResourceUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createProcessResource.');
            }
            const localVarPath = `/domains/{domainCode}/process`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof processResourceUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(processResourceUpdatable !== undefined ? processResourceUpdatable : {}) : (processResourceUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除Process资源
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessResource(domainCode: string, processId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteProcessResource.');
            }
            // verify required parameter 'processId' is not null or undefined
            if (processId === null || processId === undefined) {
                throw new RequiredError('processId','Required parameter processId was null or undefined when calling deleteProcessResource.');
            }
            const localVarPath = `/domains/{domainCode}/process/{processId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取Process资源详情
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessResource(domainCode: string, processId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getProcessResource.');
            }
            // verify required parameter 'processId' is not null or undefined
            if (processId === null || processId === undefined) {
                throw new RequiredError('processId','Required parameter processId was null or undefined when calling getProcessResource.');
            }
            const localVarPath = `/domains/{domainCode}/process/{processId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取资源绑定的处理列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProcessByResource(domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listProcessByResource.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling listProcessByResource.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/process`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域下数据处理列表
         * @param {string} domainCode 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProcessResource(domainCode: string, pageNo?: number, pageSize?: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listProcessResource.');
            }
            const localVarPath = `/domains/{domainCode}/process`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改Process资源
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {ProcessResourceUpdatable} [processResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessResource(domainCode: string, processId: number, processResourceUpdatable?: ProcessResourceUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateProcessResource.');
            }
            // verify required parameter 'processId' is not null or undefined
            if (processId === null || processId === undefined) {
                throw new RequiredError('processId','Required parameter processId was null or undefined when calling updateProcessResource.');
            }
            const localVarPath = `/domains/{domainCode}/process/{processId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof processResourceUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(processResourceUpdatable !== undefined ? processResourceUpdatable : {}) : (processResourceUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessApi - functional programming interface
 * @export
 */
export const ProcessApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建一个数据处理Process资源
         * @param {string} domainCode 
         * @param {ProcessResourceUpdatable} [processResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessResource(domainCode: string, processResourceUpdatable?: ProcessResourceUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResource> {
            const localVarAxiosArgs = ProcessApiAxiosParamCreator(configuration).createProcessResource(domainCode, processResourceUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除Process资源
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessResource(domainCode: string, processId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProcessApiAxiosParamCreator(configuration).deleteProcessResource(domainCode, processId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取Process资源详情
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessResource(domainCode: string, processId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResource> {
            const localVarAxiosArgs = ProcessApiAxiosParamCreator(configuration).getProcessResource(domainCode, processId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取资源绑定的处理列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProcessByResource(domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessResource>> {
            const localVarAxiosArgs = ProcessApiAxiosParamCreator(configuration).listProcessByResource(domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域下数据处理列表
         * @param {string} domainCode 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProcessResource(domainCode: string, pageNo?: number, pageSize?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedProcessResource> {
            const localVarAxiosArgs = ProcessApiAxiosParamCreator(configuration).listProcessResource(domainCode, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改Process资源
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {ProcessResourceUpdatable} [processResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessResource(domainCode: string, processId: number, processResourceUpdatable?: ProcessResourceUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResource> {
            const localVarAxiosArgs = ProcessApiAxiosParamCreator(configuration).updateProcessResource(domainCode, processId, processResourceUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProcessApi - factory interface
 * @export
 */
export const ProcessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建一个数据处理Process资源
         * @param {string} domainCode 
         * @param {ProcessResourceUpdatable} [processResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessResource(domainCode: string, processResourceUpdatable?: ProcessResourceUpdatable, options?: any): AxiosPromise<ProcessResource> {
            return ProcessApiFp(configuration).createProcessResource(domainCode, processResourceUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除Process资源
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessResource(domainCode: string, processId: number, options?: any): AxiosPromise<void> {
            return ProcessApiFp(configuration).deleteProcessResource(domainCode, processId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取Process资源详情
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessResource(domainCode: string, processId: number, options?: any): AxiosPromise<ProcessResource> {
            return ProcessApiFp(configuration).getProcessResource(domainCode, processId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取资源绑定的处理列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProcessByResource(domainCode: string, resourceId: number, options?: any): AxiosPromise<Array<ProcessResource>> {
            return ProcessApiFp(configuration).listProcessByResource(domainCode, resourceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域下数据处理列表
         * @param {string} domainCode 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProcessResource(domainCode: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PagedProcessResource> {
            return ProcessApiFp(configuration).listProcessResource(domainCode, pageNo, pageSize, options)(axios, basePath);
        },
        /**
         * 
         * @summary 修改Process资源
         * @param {string} domainCode 
         * @param {number} processId 
         * @param {ProcessResourceUpdatable} [processResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessResource(domainCode: string, processId: number, processResourceUpdatable?: ProcessResourceUpdatable, options?: any): AxiosPromise<ProcessResource> {
            return ProcessApiFp(configuration).updateProcessResource(domainCode, processId, processResourceUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * ProcessApi - object-oriented interface
 * @export
 * @class ProcessApi
 * @extends {BaseAPI}
 */
export class ProcessApi extends BaseAPI {
    /**
     * 
     * @summary 创建一个数据处理Process资源
     * @param {string} domainCode 
     * @param {ProcessResourceUpdatable} [processResourceUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public createProcessResource(domainCode: string, processResourceUpdatable?: ProcessResourceUpdatable, options?: any) {
        return ProcessApiFp(this.configuration).createProcessResource(domainCode, processResourceUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除Process资源
     * @param {string} domainCode 
     * @param {number} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public deleteProcessResource(domainCode: string, processId: number, options?: any) {
        return ProcessApiFp(this.configuration).deleteProcessResource(domainCode, processId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取Process资源详情
     * @param {string} domainCode 
     * @param {number} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public getProcessResource(domainCode: string, processId: number, options?: any) {
        return ProcessApiFp(this.configuration).getProcessResource(domainCode, processId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取资源绑定的处理列表
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public listProcessByResource(domainCode: string, resourceId: number, options?: any) {
        return ProcessApiFp(this.configuration).listProcessByResource(domainCode, resourceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域下数据处理列表
     * @param {string} domainCode 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public listProcessResource(domainCode: string, pageNo?: number, pageSize?: number, options?: any) {
        return ProcessApiFp(this.configuration).listProcessResource(domainCode, pageNo, pageSize, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 修改Process资源
     * @param {string} domainCode 
     * @param {number} processId 
     * @param {ProcessResourceUpdatable} [processResourceUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessApi
     */
    public updateProcessResource(domainCode: string, processId: number, processResourceUpdatable?: ProcessResourceUpdatable, options?: any) {
        return ProcessApiFp(this.configuration).updateProcessResource(domainCode, processId, processResourceUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * ResourceApi - axios parameter creator
 * @export
 */
export const ResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域资源
         * @param {string} domainCode 
         * @param {PdcResourceUpdatable} [pdcResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource(domainCode: string, pdcResourceUpdatable?: PdcResourceUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createResource.');
            }
            const localVarPath = `/domains/{domainCode}/resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof pdcResourceUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pdcResourceUpdatable !== undefined ? pdcResourceUpdatable : {}) : (pdcResourceUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteResource.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling deleteResource.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getResource.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling getResource.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据资源编码获取资源信息
         * @param {string} domainCode 
         * @param {string} resourceCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceByCode(domainCode: string, resourceCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getResourceByCode.');
            }
            // verify required parameter 'resourceCode' is not null or undefined
            if (resourceCode === null || resourceCode === undefined) {
                throw new RequiredError('resourceCode','Required parameter resourceCode was null or undefined when calling getResourceByCode.');
            }
            const localVarPath = `/domains/{domainCode}/resource`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (resourceCode !== undefined) {
                localVarQueryParameter['resourceCode'] = resourceCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域资源列表
         * @param {string} domainCode 
         * @param {ResourceType} [resourceType] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResources(domainCode: string, resourceType?: ResourceType, pageNo?: number, pageSize?: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResources.');
            }
            const localVarPath = `/domains/{domainCode}/resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourceUpdatable} [pdcResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource(domainCode: string, resourceId: number, pdcResourceUpdatable?: PdcResourceUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateResource.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling updateResource.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof pdcResourceUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pdcResourceUpdatable !== undefined ? pdcResourceUpdatable : {}) : (pdcResourceUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceApi - functional programming interface
 * @export
 */
export const ResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域资源
         * @param {string} domainCode 
         * @param {PdcResourceUpdatable} [pdcResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource(domainCode: string, pdcResourceUpdatable?: PdcResourceUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResource> {
            const localVarAxiosArgs = ResourceApiAxiosParamCreator(configuration).createResource(domainCode, pdcResourceUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ResourceApiAxiosParamCreator(configuration).deleteResource(domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResource> {
            const localVarAxiosArgs = ResourceApiAxiosParamCreator(configuration).getResource(domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据资源编码获取资源信息
         * @param {string} domainCode 
         * @param {string} resourceCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceByCode(domainCode: string, resourceCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResource> {
            const localVarAxiosArgs = ResourceApiAxiosParamCreator(configuration).getResourceByCode(domainCode, resourceCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域资源列表
         * @param {string} domainCode 
         * @param {ResourceType} [resourceType] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResources(domainCode: string, resourceType?: ResourceType, pageNo?: number, pageSize?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedPdcResource> {
            const localVarAxiosArgs = ResourceApiAxiosParamCreator(configuration).listResources(domainCode, resourceType, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourceUpdatable} [pdcResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource(domainCode: string, resourceId: number, pdcResourceUpdatable?: PdcResourceUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResource> {
            const localVarAxiosArgs = ResourceApiAxiosParamCreator(configuration).updateResource(domainCode, resourceId, pdcResourceUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceApi - factory interface
 * @export
 */
export const ResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加领域资源
         * @param {string} domainCode 
         * @param {PdcResourceUpdatable} [pdcResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource(domainCode: string, pdcResourceUpdatable?: PdcResourceUpdatable, options?: any): AxiosPromise<PdcResource> {
            return ResourceApiFp(configuration).createResource(domainCode, pdcResourceUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(domainCode: string, resourceId: number, options?: any): AxiosPromise<void> {
            return ResourceApiFp(configuration).deleteResource(domainCode, resourceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(domainCode: string, resourceId: number, options?: any): AxiosPromise<PdcResource> {
            return ResourceApiFp(configuration).getResource(domainCode, resourceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 根据资源编码获取资源信息
         * @param {string} domainCode 
         * @param {string} resourceCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceByCode(domainCode: string, resourceCode: string, options?: any): AxiosPromise<PdcResource> {
            return ResourceApiFp(configuration).getResourceByCode(domainCode, resourceCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域资源列表
         * @param {string} domainCode 
         * @param {ResourceType} [resourceType] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResources(domainCode: string, resourceType?: ResourceType, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PagedPdcResource> {
            return ResourceApiFp(configuration).listResources(domainCode, resourceType, pageNo, pageSize, options)(axios, basePath);
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourceUpdatable} [pdcResourceUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource(domainCode: string, resourceId: number, pdcResourceUpdatable?: PdcResourceUpdatable, options?: any): AxiosPromise<PdcResource> {
            return ResourceApiFp(configuration).updateResource(domainCode, resourceId, pdcResourceUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * ResourceApi - object-oriented interface
 * @export
 * @class ResourceApi
 * @extends {BaseAPI}
 */
export class ResourceApi extends BaseAPI {
    /**
     * 
     * @summary 添加领域资源
     * @param {string} domainCode 
     * @param {PdcResourceUpdatable} [pdcResourceUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public createResource(domainCode: string, pdcResourceUpdatable?: PdcResourceUpdatable, options?: any) {
        return ResourceApiFp(this.configuration).createResource(domainCode, pdcResourceUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除资源信息
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public deleteResource(domainCode: string, resourceId: number, options?: any) {
        return ResourceApiFp(this.configuration).deleteResource(domainCode, resourceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取资源信息
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public getResource(domainCode: string, resourceId: number, options?: any) {
        return ResourceApiFp(this.configuration).getResource(domainCode, resourceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 根据资源编码获取资源信息
     * @param {string} domainCode 
     * @param {string} resourceCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public getResourceByCode(domainCode: string, resourceCode: string, options?: any) {
        return ResourceApiFp(this.configuration).getResourceByCode(domainCode, resourceCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域资源列表
     * @param {string} domainCode 
     * @param {ResourceType} [resourceType] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public listResources(domainCode: string, resourceType?: ResourceType, pageNo?: number, pageSize?: number, options?: any) {
        return ResourceApiFp(this.configuration).listResources(domainCode, resourceType, pageNo, pageSize, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 修改资源信息
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {PdcResourceUpdatable} [pdcResourceUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public updateResource(domainCode: string, resourceId: number, pdcResourceUpdatable?: PdcResourceUpdatable, options?: any) {
        return ResourceApiFp(this.configuration).updateResource(domainCode, resourceId, pdcResourceUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * ResourceApplicationApi - axios parameter creator
 * @export
 */
export const ResourceApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 申请资源权限
         * @param {string} account 
         * @param {CreateResourceApplicationParams} [createResourceApplicationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyResourceApplication(account: string, createResourceApplicationParams?: CreateResourceApplicationParams, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling applyResourceApplication.');
            }
            const localVarPath = `/users/accounts/{account}/resource-applications`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof createResourceApplicationParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createResourceApplicationParams !== undefined ? createResourceApplicationParams : {}) : (createResourceApplicationParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取申请单详情
         * @param {string} account 
         * @param {number} applyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceApplication(account: string, applyId: number, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getResourceApplication.');
            }
            // verify required parameter 'applyId' is not null or undefined
            if (applyId === null || applyId === undefined) {
                throw new RequiredError('applyId','Required parameter applyId was null or undefined when calling getResourceApplication.');
            }
            const localVarPath = `/users/accounts/{account}/resource-applications/{applyId}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"applyId"}}`, encodeURIComponent(String(applyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取申请单列表
         * @param {string} account 
         * @param {ApplicationType} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceApplications(account: string, type: ApplicationType, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling listResourceApplications.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling listResourceApplications.');
            }
            const localVarPath = `/users/accounts/{account}/resource-applications`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取资源配置的范围列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScopesByResource(domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listScopesByResource.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling listScopesByResource.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/scopes`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 审批资源申请单
         * @param {string} account 
         * @param {number} applyId 
         * @param {UpdateResourceApplicationParams} [updateResourceApplicationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceApplication(account: string, applyId: number, updateResourceApplicationParams?: UpdateResourceApplicationParams, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling updateResourceApplication.');
            }
            // verify required parameter 'applyId' is not null or undefined
            if (applyId === null || applyId === undefined) {
                throw new RequiredError('applyId','Required parameter applyId was null or undefined when calling updateResourceApplication.');
            }
            const localVarPath = `/users/accounts/{account}/resource-applications/{applyId}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"applyId"}}`, encodeURIComponent(String(applyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof updateResourceApplicationParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateResourceApplicationParams !== undefined ? updateResourceApplicationParams : {}) : (updateResourceApplicationParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceApplicationApi - functional programming interface
 * @export
 */
export const ResourceApplicationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 申请资源权限
         * @param {string} account 
         * @param {CreateResourceApplicationParams} [createResourceApplicationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyResourceApplication(account: string, createResourceApplicationParams?: CreateResourceApplicationParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceApplication> {
            const localVarAxiosArgs = ResourceApplicationApiAxiosParamCreator(configuration).applyResourceApplication(account, createResourceApplicationParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取申请单详情
         * @param {string} account 
         * @param {number} applyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceApplication(account: string, applyId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceApplication> {
            const localVarAxiosArgs = ResourceApplicationApiAxiosParamCreator(configuration).getResourceApplication(account, applyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取申请单列表
         * @param {string} account 
         * @param {ApplicationType} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceApplications(account: string, type: ApplicationType, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResourceApplication> {
            const localVarAxiosArgs = ResourceApplicationApiAxiosParamCreator(configuration).listResourceApplications(account, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取资源配置的范围列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScopesByResource(domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>> {
            const localVarAxiosArgs = ResourceApplicationApiAxiosParamCreator(configuration).listScopesByResource(domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 审批资源申请单
         * @param {string} account 
         * @param {number} applyId 
         * @param {UpdateResourceApplicationParams} [updateResourceApplicationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceApplication(account: string, applyId: number, updateResourceApplicationParams?: UpdateResourceApplicationParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceApplication> {
            const localVarAxiosArgs = ResourceApplicationApiAxiosParamCreator(configuration).updateResourceApplication(account, applyId, updateResourceApplicationParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceApplicationApi - factory interface
 * @export
 */
export const ResourceApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 申请资源权限
         * @param {string} account 
         * @param {CreateResourceApplicationParams} [createResourceApplicationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyResourceApplication(account: string, createResourceApplicationParams?: CreateResourceApplicationParams, options?: any): AxiosPromise<ResourceApplication> {
            return ResourceApplicationApiFp(configuration).applyResourceApplication(account, createResourceApplicationParams, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取申请单详情
         * @param {string} account 
         * @param {number} applyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceApplication(account: string, applyId: number, options?: any): AxiosPromise<ResourceApplication> {
            return ResourceApplicationApiFp(configuration).getResourceApplication(account, applyId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取申请单列表
         * @param {string} account 
         * @param {ApplicationType} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceApplications(account: string, type: ApplicationType, options?: any): AxiosPromise<PagedResourceApplication> {
            return ResourceApplicationApiFp(configuration).listResourceApplications(account, type, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取资源配置的范围列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScopesByResource(domainCode: string, resourceId: number, options?: any): AxiosPromise<Array<Scope>> {
            return ResourceApplicationApiFp(configuration).listScopesByResource(domainCode, resourceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 审批资源申请单
         * @param {string} account 
         * @param {number} applyId 
         * @param {UpdateResourceApplicationParams} [updateResourceApplicationParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceApplication(account: string, applyId: number, updateResourceApplicationParams?: UpdateResourceApplicationParams, options?: any): AxiosPromise<ResourceApplication> {
            return ResourceApplicationApiFp(configuration).updateResourceApplication(account, applyId, updateResourceApplicationParams, options)(axios, basePath);
        },
    };
};

/**
 * ResourceApplicationApi - object-oriented interface
 * @export
 * @class ResourceApplicationApi
 * @extends {BaseAPI}
 */
export class ResourceApplicationApi extends BaseAPI {
    /**
     * 
     * @summary 申请资源权限
     * @param {string} account 
     * @param {CreateResourceApplicationParams} [createResourceApplicationParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApplicationApi
     */
    public applyResourceApplication(account: string, createResourceApplicationParams?: CreateResourceApplicationParams, options?: any) {
        return ResourceApplicationApiFp(this.configuration).applyResourceApplication(account, createResourceApplicationParams, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取申请单详情
     * @param {string} account 
     * @param {number} applyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApplicationApi
     */
    public getResourceApplication(account: string, applyId: number, options?: any) {
        return ResourceApplicationApiFp(this.configuration).getResourceApplication(account, applyId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取申请单列表
     * @param {string} account 
     * @param {ApplicationType} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApplicationApi
     */
    public listResourceApplications(account: string, type: ApplicationType, options?: any) {
        return ResourceApplicationApiFp(this.configuration).listResourceApplications(account, type, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取资源配置的范围列表
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApplicationApi
     */
    public listScopesByResource(domainCode: string, resourceId: number, options?: any) {
        return ResourceApplicationApiFp(this.configuration).listScopesByResource(domainCode, resourceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 审批资源申请单
     * @param {string} account 
     * @param {number} applyId 
     * @param {UpdateResourceApplicationParams} [updateResourceApplicationParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApplicationApi
     */
    public updateResourceApplication(account: string, applyId: number, updateResourceApplicationParams?: UpdateResourceApplicationParams, options?: any) {
        return ResourceApplicationApiFp(this.configuration).updateResourceApplication(account, applyId, updateResourceApplicationParams, options)(this.axios, this.basePath);
    }

}


/**
 * ResourceDatasApi - axios parameter creator
 * @export
 */
export const ResourceDatasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取领域资源数据详情
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceData(domainCode: string, datasetId: number, dataId: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getResourceData.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getResourceData.');
            }
            // verify required parameter 'dataId' is not null or undefined
            if (dataId === null || dataId === undefined) {
                throw new RequiredError('dataId','Required parameter dataId was null or undefined when calling getResourceData.');
            }
            const localVarPath = `/data/domains/{domainCode}/datasets/{datasetId}/resources/{dataId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据条件查询数据集资源
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} account 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {FilterCondition} [filterCondition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceDataIdsByFilters(domainCode: string, datasetId: number, account: string, pageNo?: number, pageSize?: number, filterCondition?: FilterCondition, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourceDataIdsByFilters.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling listResourceDataIdsByFilters.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling listResourceDataIdsByFilters.');
            }
            const localVarPath = `/data/domains/{domainCode}/datasets/{datasetId}/existing-resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof filterCondition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(filterCondition !== undefined ? filterCondition : {}) : (filterCondition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域资源数据列表
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} account 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceDatas(domainCode: string, datasetId: number, account: string, pageNo?: number, pageSize?: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourceDatas.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling listResourceDatas.');
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling listResourceDatas.');
            }
            const localVarPath = `/data/domains/{domainCode}/datasets/{datasetId}/resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceDatasApi - functional programming interface
 * @export
 */
export const ResourceDatasApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取领域资源数据详情
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceData(domainCode: string, datasetId: number, dataId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = ResourceDatasApiAxiosParamCreator(configuration).getResourceData(domainCode, datasetId, dataId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据条件查询数据集资源
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} account 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {FilterCondition} [filterCondition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceDataIdsByFilters(domainCode: string, datasetId: number, account: string, pageNo?: number, pageSize?: number, filterCondition?: FilterCondition, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedObjectResponse> {
            const localVarAxiosArgs = ResourceDatasApiAxiosParamCreator(configuration).listResourceDataIdsByFilters(domainCode, datasetId, account, pageNo, pageSize, filterCondition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域资源数据列表
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} account 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceDatas(domainCode: string, datasetId: number, account: string, pageNo?: number, pageSize?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedObjectResponse> {
            const localVarAxiosArgs = ResourceDatasApiAxiosParamCreator(configuration).listResourceDatas(domainCode, datasetId, account, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceDatasApi - factory interface
 * @export
 */
export const ResourceDatasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取领域资源数据详情
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceData(domainCode: string, datasetId: number, dataId: string, options?: any): AxiosPromise<object> {
            return ResourceDatasApiFp(configuration).getResourceData(domainCode, datasetId, dataId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 根据条件查询数据集资源
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} account 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {FilterCondition} [filterCondition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceDataIdsByFilters(domainCode: string, datasetId: number, account: string, pageNo?: number, pageSize?: number, filterCondition?: FilterCondition, options?: any): AxiosPromise<PagedObjectResponse> {
            return ResourceDatasApiFp(configuration).listResourceDataIdsByFilters(domainCode, datasetId, account, pageNo, pageSize, filterCondition, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域资源数据列表
         * @param {string} domainCode 
         * @param {number} datasetId 
         * @param {string} account 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceDatas(domainCode: string, datasetId: number, account: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PagedObjectResponse> {
            return ResourceDatasApiFp(configuration).listResourceDatas(domainCode, datasetId, account, pageNo, pageSize, options)(axios, basePath);
        },
    };
};

/**
 * ResourceDatasApi - object-oriented interface
 * @export
 * @class ResourceDatasApi
 * @extends {BaseAPI}
 */
export class ResourceDatasApi extends BaseAPI {
    /**
     * 
     * @summary 获取领域资源数据详情
     * @param {string} domainCode 
     * @param {number} datasetId 
     * @param {string} dataId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceDatasApi
     */
    public getResourceData(domainCode: string, datasetId: number, dataId: string, options?: any) {
        return ResourceDatasApiFp(this.configuration).getResourceData(domainCode, datasetId, dataId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 根据条件查询数据集资源
     * @param {string} domainCode 
     * @param {number} datasetId 
     * @param {string} account 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {FilterCondition} [filterCondition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceDatasApi
     */
    public listResourceDataIdsByFilters(domainCode: string, datasetId: number, account: string, pageNo?: number, pageSize?: number, filterCondition?: FilterCondition, options?: any) {
        return ResourceDatasApiFp(this.configuration).listResourceDataIdsByFilters(domainCode, datasetId, account, pageNo, pageSize, filterCondition, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域资源数据列表
     * @param {string} domainCode 
     * @param {number} datasetId 
     * @param {string} account 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceDatasApi
     */
    public listResourceDatas(domainCode: string, datasetId: number, account: string, pageNo?: number, pageSize?: number, options?: any) {
        return ResourceDatasApiFp(this.configuration).listResourceDatas(domainCode, datasetId, account, pageNo, pageSize, options)(this.axios, this.basePath);
    }

}


/**
 * ResourceEnginesApi - axios parameter creator
 * @export
 */
export const ResourceEnginesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取资源引擎列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceEngines(options: any = {}): RequestArgs {
            const localVarPath = `/system/resource-engines`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceEnginesApi - functional programming interface
 * @export
 */
export const ResourceEnginesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取资源引擎列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceEngines(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResourceEngine> {
            const localVarAxiosArgs = ResourceEnginesApiAxiosParamCreator(configuration).listResourceEngines(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceEnginesApi - factory interface
 * @export
 */
export const ResourceEnginesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取资源引擎列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceEngines(options?: any): AxiosPromise<PagedResourceEngine> {
            return ResourceEnginesApiFp(configuration).listResourceEngines(options)(axios, basePath);
        },
    };
};

/**
 * ResourceEnginesApi - object-oriented interface
 * @export
 * @class ResourceEnginesApi
 * @extends {BaseAPI}
 */
export class ResourceEnginesApi extends BaseAPI {
    /**
     * 
     * @summary 获取资源引擎列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceEnginesApi
     */
    public listResourceEngines(options?: any) {
        return ResourceEnginesApiFp(this.configuration).listResourceEngines(options)(this.axios, this.basePath);
    }

}


/**
 * ResourceIndexApi - axios parameter creator
 * @export
 */
export const ResourceIndexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域资源索引
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourceIndex} [pdcResourceIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceIndex(domainCode: string, resourceId: number, pdcResourceIndex?: PdcResourceIndex, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createResourceIndex.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling createResourceIndex.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/indexes`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof pdcResourceIndex !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pdcResourceIndex !== undefined ? pdcResourceIndex : {}) : (pdcResourceIndex || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除资源索引信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {string} indexCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceIndex(domainCode: string, resourceId: number, indexCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteResourceIndex.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling deleteResourceIndex.');
            }
            // verify required parameter 'indexCode' is not null or undefined
            if (indexCode === null || indexCode === undefined) {
                throw new RequiredError('indexCode','Required parameter indexCode was null or undefined when calling deleteResourceIndex.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/indexes/{indexCode}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"indexCode"}}`, encodeURIComponent(String(indexCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceIndexApi - functional programming interface
 * @export
 */
export const ResourceIndexApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域资源索引
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourceIndex} [pdcResourceIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceIndex(domainCode: string, resourceId: number, pdcResourceIndex?: PdcResourceIndex, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResourceIndex> {
            const localVarAxiosArgs = ResourceIndexApiAxiosParamCreator(configuration).createResourceIndex(domainCode, resourceId, pdcResourceIndex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除资源索引信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {string} indexCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceIndex(domainCode: string, resourceId: number, indexCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ResourceIndexApiAxiosParamCreator(configuration).deleteResourceIndex(domainCode, resourceId, indexCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceIndexApi - factory interface
 * @export
 */
export const ResourceIndexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加领域资源索引
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourceIndex} [pdcResourceIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceIndex(domainCode: string, resourceId: number, pdcResourceIndex?: PdcResourceIndex, options?: any): AxiosPromise<PdcResourceIndex> {
            return ResourceIndexApiFp(configuration).createResourceIndex(domainCode, resourceId, pdcResourceIndex, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除资源索引信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {string} indexCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceIndex(domainCode: string, resourceId: number, indexCode: string, options?: any): AxiosPromise<void> {
            return ResourceIndexApiFp(configuration).deleteResourceIndex(domainCode, resourceId, indexCode, options)(axios, basePath);
        },
    };
};

/**
 * ResourceIndexApi - object-oriented interface
 * @export
 * @class ResourceIndexApi
 * @extends {BaseAPI}
 */
export class ResourceIndexApi extends BaseAPI {
    /**
     * 
     * @summary 添加领域资源索引
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {PdcResourceIndex} [pdcResourceIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceIndexApi
     */
    public createResourceIndex(domainCode: string, resourceId: number, pdcResourceIndex?: PdcResourceIndex, options?: any) {
        return ResourceIndexApiFp(this.configuration).createResourceIndex(domainCode, resourceId, pdcResourceIndex, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除资源索引信息
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {string} indexCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceIndexApi
     */
    public deleteResourceIndex(domainCode: string, resourceId: number, indexCode: string, options?: any) {
        return ResourceIndexApiFp(this.configuration).deleteResourceIndex(domainCode, resourceId, indexCode, options)(this.axios, this.basePath);
    }

}


/**
 * ResourceIndexesApi - axios parameter creator
 * @export
 */
export const ResourceIndexesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取领域资源索引列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceIndexes(domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourceIndexes.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling listResourceIndexes.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/indexes`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceIndexesApi - functional programming interface
 * @export
 */
export const ResourceIndexesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取领域资源索引列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceIndexes(domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedPdcResourceIndex> {
            const localVarAxiosArgs = ResourceIndexesApiAxiosParamCreator(configuration).listResourceIndexes(domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceIndexesApi - factory interface
 * @export
 */
export const ResourceIndexesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取领域资源索引列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceIndexes(domainCode: string, resourceId: number, options?: any): AxiosPromise<PagedPdcResourceIndex> {
            return ResourceIndexesApiFp(configuration).listResourceIndexes(domainCode, resourceId, options)(axios, basePath);
        },
    };
};

/**
 * ResourceIndexesApi - object-oriented interface
 * @export
 * @class ResourceIndexesApi
 * @extends {BaseAPI}
 */
export class ResourceIndexesApi extends BaseAPI {
    /**
     * 
     * @summary 获取领域资源索引列表
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceIndexesApi
     */
    public listResourceIndexes(domainCode: string, resourceId: number, options?: any) {
        return ResourceIndexesApiFp(this.configuration).listResourceIndexes(domainCode, resourceId, options)(this.axios, this.basePath);
    }

}


/**
 * ResourcePartitionApi - axios parameter creator
 * @export
 */
export const ResourcePartitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取领域资源分区
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcePartitions(domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourcePartitions.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling listResourcePartitions.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/partitions`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcePartitionApi - functional programming interface
 * @export
 */
export const ResourcePartitionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取领域资源分区
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcePartitions(domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedPartitionInfo> {
            const localVarAxiosArgs = ResourcePartitionApiAxiosParamCreator(configuration).listResourcePartitions(domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourcePartitionApi - factory interface
 * @export
 */
export const ResourcePartitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取领域资源分区
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcePartitions(domainCode: string, resourceId: number, options?: any): AxiosPromise<PagedPartitionInfo> {
            return ResourcePartitionApiFp(configuration).listResourcePartitions(domainCode, resourceId, options)(axios, basePath);
        },
    };
};

/**
 * ResourcePartitionApi - object-oriented interface
 * @export
 * @class ResourcePartitionApi
 * @extends {BaseAPI}
 */
export class ResourcePartitionApi extends BaseAPI {
    /**
     * 
     * @summary 获取领域资源分区
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePartitionApi
     */
    public listResourcePartitions(domainCode: string, resourceId: number, options?: any) {
        return ResourcePartitionApiFp(this.configuration).listResourcePartitions(domainCode, resourceId, options)(this.axios, this.basePath);
    }

}


/**
 * ResourcePermissionApi - axios parameter creator
 * @export
 */
export const ResourcePermissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 下载附件
         * @param {number} attachmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachment(attachmentId: number, options: any = {}): RequestArgs {
            // verify required parameter 'attachmentId' is not null or undefined
            if (attachmentId === null || attachmentId === undefined) {
                throw new RequiredError('attachmentId','Required parameter attachmentId was null or undefined when calling downloadAttachment.');
            }
            const localVarPath = `/users/attachments/{attachmentId}`
                .replace(`{${"attachmentId"}}`, encodeURIComponent(String(attachmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域授权
         * @param {string} account 
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainPermission(account: string, domainCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getDomainPermission.');
            }
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getDomainPermission.');
            }
            const localVarPath = `/users/accounts/{account}/domain-permissions/{domainCode}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取带有效权限信息的资源
         * @param {string} account 
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceWithPermissions(account: string, domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getResourceWithPermissions.');
            }
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getResourceWithPermissions.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling getResourceWithPermissions.');
            }
            const localVarPath = `/users/accounts/{account}/domains/{domainCode}/resources/{resourceId}`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前用户能申请权限的领域列表
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainsForResourcePermission(account: string, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling listDomainsForResourcePermission.');
            }
            const localVarPath = `/users/accounts/{account}/domains`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取带有资源自身授权信息的资源列表
         * @param {string} account 
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithCustomPermission(account: string, domainCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling listResourcesWithCustomPermission.');
            }
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourcesWithCustomPermission.');
            }
            const localVarPath = `/users/accounts/{account}/domains/{domainCode}/resources-with-permissions`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取带有效权限信息的资源列表
         * @param {string} account 
         * @param {string} domainCode 
         * @param {ResourceAuthType} resourceAuthType 
         * @param {string} [fuzzySearchPrefix] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithPermissions(account: string, domainCode: string, resourceAuthType: ResourceAuthType, fuzzySearchPrefix?: string, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling listResourcesWithPermissions.');
            }
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourcesWithPermissions.');
            }
            // verify required parameter 'resourceAuthType' is not null or undefined
            if (resourceAuthType === null || resourceAuthType === undefined) {
                throw new RequiredError('resourceAuthType','Required parameter resourceAuthType was null or undefined when calling listResourcesWithPermissions.');
            }
            const localVarPath = `/users/accounts/{account}/domains/{domainCode}/resources`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)))
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (fuzzySearchPrefix !== undefined) {
                localVarQueryParameter['fuzzySearchPrefix'] = fuzzySearchPrefix;
            }

            if (resourceAuthType !== undefined) {
                localVarQueryParameter['resourceAuthType'] = resourceAuthType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传附件
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment(file?: any, options: any = {}): RequestArgs {
            const localVarPath = `/users/attachments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcePermissionApi - functional programming interface
 * @export
 */
export const ResourcePermissionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 下载附件
         * @param {number} attachmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachment(attachmentId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ResourcePermissionApiAxiosParamCreator(configuration).downloadAttachment(attachmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域授权
         * @param {string} account 
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainPermission(account: string, domainCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcDomainPermission> {
            const localVarAxiosArgs = ResourcePermissionApiAxiosParamCreator(configuration).getDomainPermission(account, domainCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取带有效权限信息的资源
         * @param {string} account 
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceWithPermissions(account: string, domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResourcePermission> {
            const localVarAxiosArgs = ResourcePermissionApiAxiosParamCreator(configuration).getResourceWithPermissions(account, domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前用户能申请权限的领域列表
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainsForResourcePermission(account: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedDomain> {
            const localVarAxiosArgs = ResourcePermissionApiAxiosParamCreator(configuration).listDomainsForResourcePermission(account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取带有资源自身授权信息的资源列表
         * @param {string} account 
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithCustomPermission(account: string, domainCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PdcResourcePermission>> {
            const localVarAxiosArgs = ResourcePermissionApiAxiosParamCreator(configuration).listResourcesWithCustomPermission(account, domainCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取带有效权限信息的资源列表
         * @param {string} account 
         * @param {string} domainCode 
         * @param {ResourceAuthType} resourceAuthType 
         * @param {string} [fuzzySearchPrefix] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithPermissions(account: string, domainCode: string, resourceAuthType: ResourceAuthType, fuzzySearchPrefix?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedPdcResourcePermission> {
            const localVarAxiosArgs = ResourcePermissionApiAxiosParamCreator(configuration).listResourcesWithPermissions(account, domainCode, resourceAuthType, fuzzySearchPrefix, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传附件
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment(file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachment> {
            const localVarAxiosArgs = ResourcePermissionApiAxiosParamCreator(configuration).uploadAttachment(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourcePermissionApi - factory interface
 * @export
 */
export const ResourcePermissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 下载附件
         * @param {number} attachmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachment(attachmentId: number, options?: any): AxiosPromise<void> {
            return ResourcePermissionApiFp(configuration).downloadAttachment(attachmentId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域授权
         * @param {string} account 
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainPermission(account: string, domainCode: string, options?: any): AxiosPromise<PdcDomainPermission> {
            return ResourcePermissionApiFp(configuration).getDomainPermission(account, domainCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取带有效权限信息的资源
         * @param {string} account 
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceWithPermissions(account: string, domainCode: string, resourceId: number, options?: any): AxiosPromise<PdcResourcePermission> {
            return ResourcePermissionApiFp(configuration).getResourceWithPermissions(account, domainCode, resourceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取当前用户能申请权限的领域列表
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomainsForResourcePermission(account: string, options?: any): AxiosPromise<PagedDomain> {
            return ResourcePermissionApiFp(configuration).listDomainsForResourcePermission(account, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取带有资源自身授权信息的资源列表
         * @param {string} account 
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithCustomPermission(account: string, domainCode: string, options?: any): AxiosPromise<Array<PdcResourcePermission>> {
            return ResourcePermissionApiFp(configuration).listResourcesWithCustomPermission(account, domainCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取带有效权限信息的资源列表
         * @param {string} account 
         * @param {string} domainCode 
         * @param {ResourceAuthType} resourceAuthType 
         * @param {string} [fuzzySearchPrefix] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithPermissions(account: string, domainCode: string, resourceAuthType: ResourceAuthType, fuzzySearchPrefix?: string, options?: any): AxiosPromise<PagedPdcResourcePermission> {
            return ResourcePermissionApiFp(configuration).listResourcesWithPermissions(account, domainCode, resourceAuthType, fuzzySearchPrefix, options)(axios, basePath);
        },
        /**
         * 
         * @summary 上传附件
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment(file?: any, options?: any): AxiosPromise<Attachment> {
            return ResourcePermissionApiFp(configuration).uploadAttachment(file, options)(axios, basePath);
        },
    };
};

/**
 * ResourcePermissionApi - object-oriented interface
 * @export
 * @class ResourcePermissionApi
 * @extends {BaseAPI}
 */
export class ResourcePermissionApi extends BaseAPI {
    /**
     * 
     * @summary 下载附件
     * @param {number} attachmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePermissionApi
     */
    public downloadAttachment(attachmentId: number, options?: any) {
        return ResourcePermissionApiFp(this.configuration).downloadAttachment(attachmentId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域授权
     * @param {string} account 
     * @param {string} domainCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePermissionApi
     */
    public getDomainPermission(account: string, domainCode: string, options?: any) {
        return ResourcePermissionApiFp(this.configuration).getDomainPermission(account, domainCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取带有效权限信息的资源
     * @param {string} account 
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePermissionApi
     */
    public getResourceWithPermissions(account: string, domainCode: string, resourceId: number, options?: any) {
        return ResourcePermissionApiFp(this.configuration).getResourceWithPermissions(account, domainCode, resourceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取当前用户能申请权限的领域列表
     * @param {string} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePermissionApi
     */
    public listDomainsForResourcePermission(account: string, options?: any) {
        return ResourcePermissionApiFp(this.configuration).listDomainsForResourcePermission(account, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取带有资源自身授权信息的资源列表
     * @param {string} account 
     * @param {string} domainCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePermissionApi
     */
    public listResourcesWithCustomPermission(account: string, domainCode: string, options?: any) {
        return ResourcePermissionApiFp(this.configuration).listResourcesWithCustomPermission(account, domainCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取带有效权限信息的资源列表
     * @param {string} account 
     * @param {string} domainCode 
     * @param {ResourceAuthType} resourceAuthType 
     * @param {string} [fuzzySearchPrefix] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePermissionApi
     */
    public listResourcesWithPermissions(account: string, domainCode: string, resourceAuthType: ResourceAuthType, fuzzySearchPrefix?: string, options?: any) {
        return ResourcePermissionApiFp(this.configuration).listResourcesWithPermissions(account, domainCode, resourceAuthType, fuzzySearchPrefix, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 上传附件
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePermissionApi
     */
    public uploadAttachment(file?: any, options?: any) {
        return ResourcePermissionApiFp(this.configuration).uploadAttachment(file, options)(this.axios, this.basePath);
    }

}


/**
 * ResourcePropertyApi - axios parameter creator
 * @export
 */
export const ResourcePropertyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域资源属性
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourcePropertyUpdatable} [pdcResourcePropertyUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceProperty(domainCode: string, resourceId: number, pdcResourcePropertyUpdatable?: PdcResourcePropertyUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createResourceProperty.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling createResourceProperty.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/properties`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof pdcResourcePropertyUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pdcResourcePropertyUpdatable !== undefined ? pdcResourcePropertyUpdatable : {}) : (pdcResourcePropertyUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceProperty(domainCode: string, resourceId: number, propertyId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteResourceProperty.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling deleteResourceProperty.');
            }
            // verify required parameter 'propertyId' is not null or undefined
            if (propertyId === null || propertyId === undefined) {
                throw new RequiredError('propertyId','Required parameter propertyId was null or undefined when calling deleteResourceProperty.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/properties/{propertyId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceProperty(domainCode: string, resourceId: number, propertyId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getResourceProperty.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling getResourceProperty.');
            }
            // verify required parameter 'propertyId' is not null or undefined
            if (propertyId === null || propertyId === undefined) {
                throw new RequiredError('propertyId','Required parameter propertyId was null or undefined when calling getResourceProperty.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/properties/{propertyId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域资源属性列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceProperties(domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourceProperties.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling listResourceProperties.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/properties`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {PdcResourcePropertyUpdatable} [pdcResourcePropertyUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceProperty(domainCode: string, resourceId: number, propertyId: number, pdcResourcePropertyUpdatable?: PdcResourcePropertyUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateResourceProperty.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling updateResourceProperty.');
            }
            // verify required parameter 'propertyId' is not null or undefined
            if (propertyId === null || propertyId === undefined) {
                throw new RequiredError('propertyId','Required parameter propertyId was null or undefined when calling updateResourceProperty.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/properties/{propertyId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof pdcResourcePropertyUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pdcResourcePropertyUpdatable !== undefined ? pdcResourcePropertyUpdatable : {}) : (pdcResourcePropertyUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcePropertyApi - functional programming interface
 * @export
 */
export const ResourcePropertyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域资源属性
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourcePropertyUpdatable} [pdcResourcePropertyUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceProperty(domainCode: string, resourceId: number, pdcResourcePropertyUpdatable?: PdcResourcePropertyUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResourceProperty> {
            const localVarAxiosArgs = ResourcePropertyApiAxiosParamCreator(configuration).createResourceProperty(domainCode, resourceId, pdcResourcePropertyUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceProperty(domainCode: string, resourceId: number, propertyId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ResourcePropertyApiAxiosParamCreator(configuration).deleteResourceProperty(domainCode, resourceId, propertyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceProperty(domainCode: string, resourceId: number, propertyId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResourceProperty> {
            const localVarAxiosArgs = ResourcePropertyApiAxiosParamCreator(configuration).getResourceProperty(domainCode, resourceId, propertyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域资源属性列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceProperties(domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedPdcResourceProperty> {
            const localVarAxiosArgs = ResourcePropertyApiAxiosParamCreator(configuration).listResourceProperties(domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {PdcResourcePropertyUpdatable} [pdcResourcePropertyUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceProperty(domainCode: string, resourceId: number, propertyId: number, pdcResourcePropertyUpdatable?: PdcResourcePropertyUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdcResourceProperty> {
            const localVarAxiosArgs = ResourcePropertyApiAxiosParamCreator(configuration).updateResourceProperty(domainCode, resourceId, propertyId, pdcResourcePropertyUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourcePropertyApi - factory interface
 * @export
 */
export const ResourcePropertyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加领域资源属性
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {PdcResourcePropertyUpdatable} [pdcResourcePropertyUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceProperty(domainCode: string, resourceId: number, pdcResourcePropertyUpdatable?: PdcResourcePropertyUpdatable, options?: any): AxiosPromise<PdcResourceProperty> {
            return ResourcePropertyApiFp(configuration).createResourceProperty(domainCode, resourceId, pdcResourcePropertyUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceProperty(domainCode: string, resourceId: number, propertyId: number, options?: any): AxiosPromise<void> {
            return ResourcePropertyApiFp(configuration).deleteResourceProperty(domainCode, resourceId, propertyId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceProperty(domainCode: string, resourceId: number, propertyId: number, options?: any): AxiosPromise<PdcResourceProperty> {
            return ResourcePropertyApiFp(configuration).getResourceProperty(domainCode, resourceId, propertyId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域资源属性列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceProperties(domainCode: string, resourceId: number, options?: any): AxiosPromise<PagedPdcResourceProperty> {
            return ResourcePropertyApiFp(configuration).listResourceProperties(domainCode, resourceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {number} propertyId 
         * @param {PdcResourcePropertyUpdatable} [pdcResourcePropertyUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceProperty(domainCode: string, resourceId: number, propertyId: number, pdcResourcePropertyUpdatable?: PdcResourcePropertyUpdatable, options?: any): AxiosPromise<PdcResourceProperty> {
            return ResourcePropertyApiFp(configuration).updateResourceProperty(domainCode, resourceId, propertyId, pdcResourcePropertyUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * ResourcePropertyApi - object-oriented interface
 * @export
 * @class ResourcePropertyApi
 * @extends {BaseAPI}
 */
export class ResourcePropertyApi extends BaseAPI {
    /**
     * 
     * @summary 添加领域资源属性
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {PdcResourcePropertyUpdatable} [pdcResourcePropertyUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePropertyApi
     */
    public createResourceProperty(domainCode: string, resourceId: number, pdcResourcePropertyUpdatable?: PdcResourcePropertyUpdatable, options?: any) {
        return ResourcePropertyApiFp(this.configuration).createResourceProperty(domainCode, resourceId, pdcResourcePropertyUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除资源信息
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {number} propertyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePropertyApi
     */
    public deleteResourceProperty(domainCode: string, resourceId: number, propertyId: number, options?: any) {
        return ResourcePropertyApiFp(this.configuration).deleteResourceProperty(domainCode, resourceId, propertyId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取资源信息
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {number} propertyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePropertyApi
     */
    public getResourceProperty(domainCode: string, resourceId: number, propertyId: number, options?: any) {
        return ResourcePropertyApiFp(this.configuration).getResourceProperty(domainCode, resourceId, propertyId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域资源属性列表
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePropertyApi
     */
    public listResourceProperties(domainCode: string, resourceId: number, options?: any) {
        return ResourcePropertyApiFp(this.configuration).listResourceProperties(domainCode, resourceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 修改资源信息
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {number} propertyId 
     * @param {PdcResourcePropertyUpdatable} [pdcResourcePropertyUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcePropertyApi
     */
    public updateResourceProperty(domainCode: string, resourceId: number, propertyId: number, pdcResourcePropertyUpdatable?: PdcResourcePropertyUpdatable, options?: any) {
        return ResourcePropertyApiFp(this.configuration).updateResourceProperty(domainCode, resourceId, propertyId, pdcResourcePropertyUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * ResourceRelationshipApi - axios parameter creator
 * @export
 */
export const ResourceRelationshipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域资源关联
         * @param {string} domainCode 
         * @param {RelationshipUpdatable} [relationshipUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRelationship(domainCode: string, relationshipUpdatable?: RelationshipUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createResourceRelationship.');
            }
            const localVarPath = `/domains/{domainCode}/relationships`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof relationshipUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(relationshipUpdatable !== undefined ? relationshipUpdatable : {}) : (relationshipUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRelationship(domainCode: string, relationshipId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteResourceRelationship.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling deleteResourceRelationship.');
            }
            const localVarPath = `/domains/{domainCode}/relationships/{relationshipId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"relationshipId"}}`, encodeURIComponent(String(relationshipId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceRelationship(domainCode: string, relationshipId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getResourceRelationship.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling getResourceRelationship.');
            }
            const localVarPath = `/domains/{domainCode}/relationships/{relationshipId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"relationshipId"}}`, encodeURIComponent(String(relationshipId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取源资源可关联（直接）的 资源 列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkableResources(domainCode: string, resourceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listLinkableResources.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling listLinkableResources.');
            }
            const localVarPath = `/domains/{domainCode}/resources/{resourceId}/relationship-resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取领域资源关联列表
         * @param {string} domainCode 
         * @param {number} [sourceResourceId] 源资源ID
         * @param {number} [sourceResourcePropertyId] 源资源属性ID
         * @param {number} [targetResourceId] 目标资源ID
         * @param {number} [targetResourcePropertyId] 目标属性ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceRelationships(domainCode: string, sourceResourceId?: number, sourceResourcePropertyId?: number, targetResourceId?: number, targetResourcePropertyId?: number, pageNo?: number, pageSize?: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourceRelationships.');
            }
            const localVarPath = `/domains/{domainCode}/relationships`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sourceResourceId !== undefined) {
                localVarQueryParameter['sourceResourceId'] = sourceResourceId;
            }

            if (sourceResourcePropertyId !== undefined) {
                localVarQueryParameter['sourceResourcePropertyId'] = sourceResourcePropertyId;
            }

            if (targetResourceId !== undefined) {
                localVarQueryParameter['targetResourceId'] = targetResourceId;
            }

            if (targetResourcePropertyId !== undefined) {
                localVarQueryParameter['targetResourcePropertyId'] = targetResourcePropertyId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {RelationshipUpdatable} [relationshipUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceRelationship(domainCode: string, relationshipId: number, relationshipUpdatable?: RelationshipUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateResourceRelationship.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling updateResourceRelationship.');
            }
            const localVarPath = `/domains/{domainCode}/relationships/{relationshipId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"relationshipId"}}`, encodeURIComponent(String(relationshipId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof relationshipUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(relationshipUpdatable !== undefined ? relationshipUpdatable : {}) : (relationshipUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceRelationshipApi - functional programming interface
 * @export
 */
export const ResourceRelationshipApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加领域资源关联
         * @param {string} domainCode 
         * @param {RelationshipUpdatable} [relationshipUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRelationship(domainCode: string, relationshipUpdatable?: RelationshipUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationship> {
            const localVarAxiosArgs = ResourceRelationshipApiAxiosParamCreator(configuration).createResourceRelationship(domainCode, relationshipUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRelationship(domainCode: string, relationshipId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ResourceRelationshipApiAxiosParamCreator(configuration).deleteResourceRelationship(domainCode, relationshipId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceRelationship(domainCode: string, relationshipId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationship> {
            const localVarAxiosArgs = ResourceRelationshipApiAxiosParamCreator(configuration).getResourceRelationship(domainCode, relationshipId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取源资源可关联（直接）的 资源 列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkableResources(domainCode: string, resourceId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PdcResource>> {
            const localVarAxiosArgs = ResourceRelationshipApiAxiosParamCreator(configuration).listLinkableResources(domainCode, resourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取领域资源关联列表
         * @param {string} domainCode 
         * @param {number} [sourceResourceId] 源资源ID
         * @param {number} [sourceResourcePropertyId] 源资源属性ID
         * @param {number} [targetResourceId] 目标资源ID
         * @param {number} [targetResourcePropertyId] 目标属性ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceRelationships(domainCode: string, sourceResourceId?: number, sourceResourcePropertyId?: number, targetResourceId?: number, targetResourcePropertyId?: number, pageNo?: number, pageSize?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRelationship> {
            const localVarAxiosArgs = ResourceRelationshipApiAxiosParamCreator(configuration).listResourceRelationships(domainCode, sourceResourceId, sourceResourcePropertyId, targetResourceId, targetResourcePropertyId, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {RelationshipUpdatable} [relationshipUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceRelationship(domainCode: string, relationshipId: number, relationshipUpdatable?: RelationshipUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationship> {
            const localVarAxiosArgs = ResourceRelationshipApiAxiosParamCreator(configuration).updateResourceRelationship(domainCode, relationshipId, relationshipUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceRelationshipApi - factory interface
 * @export
 */
export const ResourceRelationshipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加领域资源关联
         * @param {string} domainCode 
         * @param {RelationshipUpdatable} [relationshipUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRelationship(domainCode: string, relationshipUpdatable?: RelationshipUpdatable, options?: any): AxiosPromise<Relationship> {
            return ResourceRelationshipApiFp(configuration).createResourceRelationship(domainCode, relationshipUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRelationship(domainCode: string, relationshipId: number, options?: any): AxiosPromise<void> {
            return ResourceRelationshipApiFp(configuration).deleteResourceRelationship(domainCode, relationshipId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceRelationship(domainCode: string, relationshipId: number, options?: any): AxiosPromise<Relationship> {
            return ResourceRelationshipApiFp(configuration).getResourceRelationship(domainCode, relationshipId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取源资源可关联（直接）的 资源 列表
         * @param {string} domainCode 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkableResources(domainCode: string, resourceId: number, options?: any): AxiosPromise<Array<PdcResource>> {
            return ResourceRelationshipApiFp(configuration).listLinkableResources(domainCode, resourceId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取领域资源关联列表
         * @param {string} domainCode 
         * @param {number} [sourceResourceId] 源资源ID
         * @param {number} [sourceResourcePropertyId] 源资源属性ID
         * @param {number} [targetResourceId] 目标资源ID
         * @param {number} [targetResourcePropertyId] 目标属性ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceRelationships(domainCode: string, sourceResourceId?: number, sourceResourcePropertyId?: number, targetResourceId?: number, targetResourcePropertyId?: number, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PagedRelationship> {
            return ResourceRelationshipApiFp(configuration).listResourceRelationships(domainCode, sourceResourceId, sourceResourcePropertyId, targetResourceId, targetResourcePropertyId, pageNo, pageSize, options)(axios, basePath);
        },
        /**
         * 
         * @summary 修改资源信息
         * @param {string} domainCode 
         * @param {number} relationshipId 
         * @param {RelationshipUpdatable} [relationshipUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceRelationship(domainCode: string, relationshipId: number, relationshipUpdatable?: RelationshipUpdatable, options?: any): AxiosPromise<Relationship> {
            return ResourceRelationshipApiFp(configuration).updateResourceRelationship(domainCode, relationshipId, relationshipUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * ResourceRelationshipApi - object-oriented interface
 * @export
 * @class ResourceRelationshipApi
 * @extends {BaseAPI}
 */
export class ResourceRelationshipApi extends BaseAPI {
    /**
     * 
     * @summary 添加领域资源关联
     * @param {string} domainCode 
     * @param {RelationshipUpdatable} [relationshipUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationshipApi
     */
    public createResourceRelationship(domainCode: string, relationshipUpdatable?: RelationshipUpdatable, options?: any) {
        return ResourceRelationshipApiFp(this.configuration).createResourceRelationship(domainCode, relationshipUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除资源信息
     * @param {string} domainCode 
     * @param {number} relationshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationshipApi
     */
    public deleteResourceRelationship(domainCode: string, relationshipId: number, options?: any) {
        return ResourceRelationshipApiFp(this.configuration).deleteResourceRelationship(domainCode, relationshipId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取资源信息
     * @param {string} domainCode 
     * @param {number} relationshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationshipApi
     */
    public getResourceRelationship(domainCode: string, relationshipId: number, options?: any) {
        return ResourceRelationshipApiFp(this.configuration).getResourceRelationship(domainCode, relationshipId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取源资源可关联（直接）的 资源 列表
     * @param {string} domainCode 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationshipApi
     */
    public listLinkableResources(domainCode: string, resourceId: number, options?: any) {
        return ResourceRelationshipApiFp(this.configuration).listLinkableResources(domainCode, resourceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取领域资源关联列表
     * @param {string} domainCode 
     * @param {number} [sourceResourceId] 源资源ID
     * @param {number} [sourceResourcePropertyId] 源资源属性ID
     * @param {number} [targetResourceId] 目标资源ID
     * @param {number} [targetResourcePropertyId] 目标属性ID
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationshipApi
     */
    public listResourceRelationships(domainCode: string, sourceResourceId?: number, sourceResourcePropertyId?: number, targetResourceId?: number, targetResourcePropertyId?: number, pageNo?: number, pageSize?: number, options?: any) {
        return ResourceRelationshipApiFp(this.configuration).listResourceRelationships(domainCode, sourceResourceId, sourceResourcePropertyId, targetResourceId, targetResourcePropertyId, pageNo, pageSize, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 修改资源信息
     * @param {string} domainCode 
     * @param {number} relationshipId 
     * @param {RelationshipUpdatable} [relationshipUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationshipApi
     */
    public updateResourceRelationship(domainCode: string, relationshipId: number, relationshipUpdatable?: RelationshipUpdatable, options?: any) {
        return ResourceRelationshipApiFp(this.configuration).updateResourceRelationship(domainCode, relationshipId, relationshipUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * ResourceUploadApi - axios parameter creator
 * @export
 */
export const ResourceUploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 上传资源模板
         * @param {string} domainCode 
         * @param {number} engineInstanceId 
         * @param {string} resourceType 
         * @param {any} file 
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResourceFile(domainCode: string, engineInstanceId: number, resourceType: string, file: any, account?: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling uploadResourceFile.');
            }
            // verify required parameter 'engineInstanceId' is not null or undefined
            if (engineInstanceId === null || engineInstanceId === undefined) {
                throw new RequiredError('engineInstanceId','Required parameter engineInstanceId was null or undefined when calling uploadResourceFile.');
            }
            // verify required parameter 'resourceType' is not null or undefined
            if (resourceType === null || resourceType === undefined) {
                throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling uploadResourceFile.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling uploadResourceFile.');
            }
            const localVarPath = `/domains/{domainCode}/resources/upload`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (account !== undefined) { 
                localVarFormParams.append('account', account as any);
            }
    
            if (engineInstanceId !== undefined) { 
                localVarFormParams.append('engineInstanceId', engineInstanceId as any);
            }
    
            if (resourceType !== undefined) { 
                localVarFormParams.append('resourceType', resourceType as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceUploadApi - functional programming interface
 * @export
 */
export const ResourceUploadApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 上传资源模板
         * @param {string} domainCode 
         * @param {number} engineInstanceId 
         * @param {string} resourceType 
         * @param {any} file 
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResourceFile(domainCode: string, engineInstanceId: number, resourceType: string, file: any, account?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse> {
            const localVarAxiosArgs = ResourceUploadApiAxiosParamCreator(configuration).uploadResourceFile(domainCode, engineInstanceId, resourceType, file, account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResourceUploadApi - factory interface
 * @export
 */
export const ResourceUploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 上传资源模板
         * @param {string} domainCode 
         * @param {number} engineInstanceId 
         * @param {string} resourceType 
         * @param {any} file 
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResourceFile(domainCode: string, engineInstanceId: number, resourceType: string, file: any, account?: string, options?: any): AxiosPromise<CommonResponse> {
            return ResourceUploadApiFp(configuration).uploadResourceFile(domainCode, engineInstanceId, resourceType, file, account, options)(axios, basePath);
        },
    };
};

/**
 * ResourceUploadApi - object-oriented interface
 * @export
 * @class ResourceUploadApi
 * @extends {BaseAPI}
 */
export class ResourceUploadApi extends BaseAPI {
    /**
     * 
     * @summary 上传资源模板
     * @param {string} domainCode 
     * @param {number} engineInstanceId 
     * @param {string} resourceType 
     * @param {any} file 
     * @param {string} [account] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceUploadApi
     */
    public uploadResourceFile(domainCode: string, engineInstanceId: number, resourceType: string, file: any, account?: string, options?: any) {
        return ResourceUploadApiFp(this.configuration).uploadResourceFile(domainCode, engineInstanceId, resourceType, file, account, options)(this.axios, this.basePath);
    }

}


/**
 * ScopeApi - axios parameter creator
 * @export
 */
export const ScopeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建范围
         * @param {string} domainCode 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScope(domainCode: string, scopeUpdatable?: ScopeUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createScope.');
            }
            const localVarPath = `/domains/{domainCode}/scopes`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof scopeUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(scopeUpdatable !== undefined ? scopeUpdatable : {}) : (scopeUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建系统范围
         * @param {string} account 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystemScope(account: string, scopeUpdatable?: ScopeUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling createSystemScope.');
            }
            const localVarPath = `/users/accounts/{account}/scopes`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof scopeUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(scopeUpdatable !== undefined ? scopeUpdatable : {}) : (scopeUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScope(domainCode: string, scopeId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteScope.');
            }
            // verify required parameter 'scopeId' is not null or undefined
            if (scopeId === null || scopeId === undefined) {
                throw new RequiredError('scopeId','Required parameter scopeId was null or undefined when calling deleteScope.');
            }
            const localVarPath = `/domains/{domainCode}/scopes/{scopeId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScope(domainCode: string, scopeId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getScope.');
            }
            // verify required parameter 'scopeId' is not null or undefined
            if (scopeId === null || scopeId === undefined) {
                throw new RequiredError('scopeId','Required parameter scopeId was null or undefined when calling getScope.');
            }
            const localVarPath = `/domains/{domainCode}/scopes/{scopeId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取范围下的资源列表
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesByScopeId(domainCode: string, scopeId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourcesByScopeId.');
            }
            // verify required parameter 'scopeId' is not null or undefined
            if (scopeId === null || scopeId === undefined) {
                throw new RequiredError('scopeId','Required parameter scopeId was null or undefined when calling listResourcesByScopeId.');
            }
            const localVarPath = `/domains/{domainCode}/scopes/{scopeId}/resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取范围列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScopes(domainCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listScopes.');
            }
            const localVarPath = `/domains/{domainCode}/scopes`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取系统范围列表
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemScopes(account: string, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling listSystemScopes.');
            }
            const localVarPath = `/users/accounts/{account}/scopes`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScope(domainCode: string, scopeId: number, scopeUpdatable?: ScopeUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateScope.');
            }
            // verify required parameter 'scopeId' is not null or undefined
            if (scopeId === null || scopeId === undefined) {
                throw new RequiredError('scopeId','Required parameter scopeId was null or undefined when calling updateScope.');
            }
            const localVarPath = `/domains/{domainCode}/scopes/{scopeId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"scopeId"}}`, encodeURIComponent(String(scopeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof scopeUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(scopeUpdatable !== undefined ? scopeUpdatable : {}) : (scopeUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScopeApi - functional programming interface
 * @export
 */
export const ScopeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建范围
         * @param {string} domainCode 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScope(domainCode: string, scopeUpdatable?: ScopeUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scope> {
            const localVarAxiosArgs = ScopeApiAxiosParamCreator(configuration).createScope(domainCode, scopeUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建系统范围
         * @param {string} account 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystemScope(account: string, scopeUpdatable?: ScopeUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scope> {
            const localVarAxiosArgs = ScopeApiAxiosParamCreator(configuration).createSystemScope(account, scopeUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScope(domainCode: string, scopeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ScopeApiAxiosParamCreator(configuration).deleteScope(domainCode, scopeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScope(domainCode: string, scopeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scope> {
            const localVarAxiosArgs = ScopeApiAxiosParamCreator(configuration).getScope(domainCode, scopeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取范围下的资源列表
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesByScopeId(domainCode: string, scopeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PdcResource>> {
            const localVarAxiosArgs = ScopeApiAxiosParamCreator(configuration).listResourcesByScopeId(domainCode, scopeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取范围列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScopes(domainCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedScope> {
            const localVarAxiosArgs = ScopeApiAxiosParamCreator(configuration).listScopes(domainCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取系统范围列表
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemScopes(account: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedScope> {
            const localVarAxiosArgs = ScopeApiAxiosParamCreator(configuration).listSystemScopes(account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScope(domainCode: string, scopeId: number, scopeUpdatable?: ScopeUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scope> {
            const localVarAxiosArgs = ScopeApiAxiosParamCreator(configuration).updateScope(domainCode, scopeId, scopeUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ScopeApi - factory interface
 * @export
 */
export const ScopeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建范围
         * @param {string} domainCode 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScope(domainCode: string, scopeUpdatable?: ScopeUpdatable, options?: any): AxiosPromise<Scope> {
            return ScopeApiFp(configuration).createScope(domainCode, scopeUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 创建系统范围
         * @param {string} account 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystemScope(account: string, scopeUpdatable?: ScopeUpdatable, options?: any): AxiosPromise<Scope> {
            return ScopeApiFp(configuration).createSystemScope(account, scopeUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScope(domainCode: string, scopeId: number, options?: any): AxiosPromise<void> {
            return ScopeApiFp(configuration).deleteScope(domainCode, scopeId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScope(domainCode: string, scopeId: number, options?: any): AxiosPromise<Scope> {
            return ScopeApiFp(configuration).getScope(domainCode, scopeId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取范围下的资源列表
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesByScopeId(domainCode: string, scopeId: number, options?: any): AxiosPromise<Array<PdcResource>> {
            return ScopeApiFp(configuration).listResourcesByScopeId(domainCode, scopeId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取范围列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScopes(domainCode: string, options?: any): AxiosPromise<PagedScope> {
            return ScopeApiFp(configuration).listScopes(domainCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取系统范围列表
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemScopes(account: string, options?: any): AxiosPromise<PagedScope> {
            return ScopeApiFp(configuration).listSystemScopes(account, options)(axios, basePath);
        },
        /**
         * 
         * @summary 修改范围信息
         * @param {string} domainCode 
         * @param {number} scopeId 
         * @param {ScopeUpdatable} [scopeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScope(domainCode: string, scopeId: number, scopeUpdatable?: ScopeUpdatable, options?: any): AxiosPromise<Scope> {
            return ScopeApiFp(configuration).updateScope(domainCode, scopeId, scopeUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * ScopeApi - object-oriented interface
 * @export
 * @class ScopeApi
 * @extends {BaseAPI}
 */
export class ScopeApi extends BaseAPI {
    /**
     * 
     * @summary 创建范围
     * @param {string} domainCode 
     * @param {ScopeUpdatable} [scopeUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public createScope(domainCode: string, scopeUpdatable?: ScopeUpdatable, options?: any) {
        return ScopeApiFp(this.configuration).createScope(domainCode, scopeUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 创建系统范围
     * @param {string} account 
     * @param {ScopeUpdatable} [scopeUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public createSystemScope(account: string, scopeUpdatable?: ScopeUpdatable, options?: any) {
        return ScopeApiFp(this.configuration).createSystemScope(account, scopeUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除范围信息
     * @param {string} domainCode 
     * @param {number} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public deleteScope(domainCode: string, scopeId: number, options?: any) {
        return ScopeApiFp(this.configuration).deleteScope(domainCode, scopeId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取范围信息
     * @param {string} domainCode 
     * @param {number} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public getScope(domainCode: string, scopeId: number, options?: any) {
        return ScopeApiFp(this.configuration).getScope(domainCode, scopeId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取范围下的资源列表
     * @param {string} domainCode 
     * @param {number} scopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public listResourcesByScopeId(domainCode: string, scopeId: number, options?: any) {
        return ScopeApiFp(this.configuration).listResourcesByScopeId(domainCode, scopeId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取范围列表
     * @param {string} domainCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public listScopes(domainCode: string, options?: any) {
        return ScopeApiFp(this.configuration).listScopes(domainCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取系统范围列表
     * @param {string} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public listSystemScopes(account: string, options?: any) {
        return ScopeApiFp(this.configuration).listSystemScopes(account, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 修改范围信息
     * @param {string} domainCode 
     * @param {number} scopeId 
     * @param {ScopeUpdatable} [scopeUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeApi
     */
    public updateScope(domainCode: string, scopeId: number, scopeUpdatable?: ScopeUpdatable, options?: any) {
        return ScopeApiFp(this.configuration).updateScope(domainCode, scopeId, scopeUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * TagApi - axios parameter creator
 * @export
 */
export const TagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量操作当前标签下的数据集
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {BatchOperationType} batchOperationType 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchOperateResources(domainCode: string, tagId: number, batchOperationType: BatchOperationType, requestBody?: Array<number>, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling batchOperateResources.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling batchOperateResources.');
            }
            // verify required parameter 'batchOperationType' is not null or undefined
            if (batchOperationType === null || batchOperationType === undefined) {
                throw new RequiredError('batchOperationType','Required parameter batchOperationType was null or undefined when calling batchOperateResources.');
            }
            const localVarPath = `/domains/{domainCode}/tags/{tagId}/resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (batchOperationType !== undefined) {
                localVarQueryParameter['batchOperationType'] = batchOperationType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建标签
         * @param {string} domainCode 
         * @param {TagUpdatable} [tagUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(domainCode: string, tagUpdatable?: TagUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createTag.');
            }
            const localVarPath = `/domains/{domainCode}/tags`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof tagUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tagUpdatable !== undefined ? tagUpdatable : {}) : (tagUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除标签信息
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(domainCode: string, tagId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteTag.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling deleteTag.');
            }
            const localVarPath = `/domains/{domainCode}/tags/{tagId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取标签信息
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(domainCode: string, tagId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getTag.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling getTag.');
            }
            const localVarPath = `/domains/{domainCode}/tags/{tagId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前标签的资源列表
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesByTagId(domainCode: string, tagId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourcesByTagId.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling listResourcesByTagId.');
            }
            const localVarPath = `/domains/{domainCode}/tags/{tagId}/resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取未添加当前标签的资源列表
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithCurrentTag(domainCode: string, tagId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listResourcesWithCurrentTag.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling listResourcesWithCurrentTag.');
            }
            const localVarPath = `/domains/{domainCode}/tags/{tagId}/untag-resources`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取标签列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(domainCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listTags.');
            }
            const localVarPath = `/domains/{domainCode}/tags`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新标签
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {TagUpdatable} [tagUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(domainCode: string, tagId: number, tagUpdatable?: TagUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateTag.');
            }
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling updateTag.');
            }
            const localVarPath = `/domains/{domainCode}/tags/{tagId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof tagUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tagUpdatable !== undefined ? tagUpdatable : {}) : (tagUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 * @export
 */
export const TagApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量操作当前标签下的数据集
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {BatchOperationType} batchOperationType 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchOperateResources(domainCode: string, tagId: number, batchOperationType: BatchOperationType, requestBody?: Array<number>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TagApiAxiosParamCreator(configuration).batchOperateResources(domainCode, tagId, batchOperationType, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建标签
         * @param {string} domainCode 
         * @param {TagUpdatable} [tagUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(domainCode: string, tagUpdatable?: TagUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag> {
            const localVarAxiosArgs = TagApiAxiosParamCreator(configuration).createTag(domainCode, tagUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除标签信息
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(domainCode: string, tagId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TagApiAxiosParamCreator(configuration).deleteTag(domainCode, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取标签信息
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(domainCode: string, tagId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag> {
            const localVarAxiosArgs = TagApiAxiosParamCreator(configuration).getTag(domainCode, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前标签的资源列表
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesByTagId(domainCode: string, tagId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PdcResource>> {
            const localVarAxiosArgs = TagApiAxiosParamCreator(configuration).listResourcesByTagId(domainCode, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取未添加当前标签的资源列表
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithCurrentTag(domainCode: string, tagId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PdcResource>> {
            const localVarAxiosArgs = TagApiAxiosParamCreator(configuration).listResourcesWithCurrentTag(domainCode, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取标签列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(domainCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedTag> {
            const localVarAxiosArgs = TagApiAxiosParamCreator(configuration).listTags(domainCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新标签
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {TagUpdatable} [tagUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(domainCode: string, tagId: number, tagUpdatable?: TagUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag> {
            const localVarAxiosArgs = TagApiAxiosParamCreator(configuration).updateTag(domainCode, tagId, tagUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TagApi - factory interface
 * @export
 */
export const TagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 批量操作当前标签下的数据集
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {BatchOperationType} batchOperationType 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchOperateResources(domainCode: string, tagId: number, batchOperationType: BatchOperationType, requestBody?: Array<number>, options?: any): AxiosPromise<void> {
            return TagApiFp(configuration).batchOperateResources(domainCode, tagId, batchOperationType, requestBody, options)(axios, basePath);
        },
        /**
         * 
         * @summary 创建标签
         * @param {string} domainCode 
         * @param {TagUpdatable} [tagUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(domainCode: string, tagUpdatable?: TagUpdatable, options?: any): AxiosPromise<Tag> {
            return TagApiFp(configuration).createTag(domainCode, tagUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除标签信息
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(domainCode: string, tagId: number, options?: any): AxiosPromise<void> {
            return TagApiFp(configuration).deleteTag(domainCode, tagId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取标签信息
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(domainCode: string, tagId: number, options?: any): AxiosPromise<Tag> {
            return TagApiFp(configuration).getTag(domainCode, tagId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取当前标签的资源列表
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesByTagId(domainCode: string, tagId: number, options?: any): AxiosPromise<Array<PdcResource>> {
            return TagApiFp(configuration).listResourcesByTagId(domainCode, tagId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取未添加当前标签的资源列表
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourcesWithCurrentTag(domainCode: string, tagId: number, options?: any): AxiosPromise<Array<PdcResource>> {
            return TagApiFp(configuration).listResourcesWithCurrentTag(domainCode, tagId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取标签列表
         * @param {string} domainCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(domainCode: string, options?: any): AxiosPromise<PagedTag> {
            return TagApiFp(configuration).listTags(domainCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 更新标签
         * @param {string} domainCode 
         * @param {number} tagId 
         * @param {TagUpdatable} [tagUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(domainCode: string, tagId: number, tagUpdatable?: TagUpdatable, options?: any): AxiosPromise<Tag> {
            return TagApiFp(configuration).updateTag(domainCode, tagId, tagUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export class TagApi extends BaseAPI {
    /**
     * 
     * @summary 批量操作当前标签下的数据集
     * @param {string} domainCode 
     * @param {number} tagId 
     * @param {BatchOperationType} batchOperationType 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public batchOperateResources(domainCode: string, tagId: number, batchOperationType: BatchOperationType, requestBody?: Array<number>, options?: any) {
        return TagApiFp(this.configuration).batchOperateResources(domainCode, tagId, batchOperationType, requestBody, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 创建标签
     * @param {string} domainCode 
     * @param {TagUpdatable} [tagUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public createTag(domainCode: string, tagUpdatable?: TagUpdatable, options?: any) {
        return TagApiFp(this.configuration).createTag(domainCode, tagUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除标签信息
     * @param {string} domainCode 
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public deleteTag(domainCode: string, tagId: number, options?: any) {
        return TagApiFp(this.configuration).deleteTag(domainCode, tagId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取标签信息
     * @param {string} domainCode 
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public getTag(domainCode: string, tagId: number, options?: any) {
        return TagApiFp(this.configuration).getTag(domainCode, tagId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取当前标签的资源列表
     * @param {string} domainCode 
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public listResourcesByTagId(domainCode: string, tagId: number, options?: any) {
        return TagApiFp(this.configuration).listResourcesByTagId(domainCode, tagId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取未添加当前标签的资源列表
     * @param {string} domainCode 
     * @param {number} tagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public listResourcesWithCurrentTag(domainCode: string, tagId: number, options?: any) {
        return TagApiFp(this.configuration).listResourcesWithCurrentTag(domainCode, tagId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取标签列表
     * @param {string} domainCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public listTags(domainCode: string, options?: any) {
        return TagApiFp(this.configuration).listTags(domainCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 更新标签
     * @param {string} domainCode 
     * @param {number} tagId 
     * @param {TagUpdatable} [tagUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public updateTag(domainCode: string, tagId: number, tagUpdatable?: TagUpdatable, options?: any) {
        return TagApiFp(this.configuration).updateTag(domainCode, tagId, tagUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * TagResourceTreeApi - axios parameter creator
 * @export
 */
export const TagResourceTreeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取用户的标签树
         * @param {string} account 
         * @param {string} [domainCode] 
         * @param {number} [tagId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagResourceTree(account: string, domainCode?: string, tagId?: number, options: any = {}): RequestArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling getTagResourceTree.');
            }
            const localVarPath = `/trees/tag-resource-tree`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (domainCode !== undefined) {
                localVarQueryParameter['domainCode'] = domainCode;
            }

            if (tagId !== undefined) {
                localVarQueryParameter['tagId'] = tagId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagResourceTreeApi - functional programming interface
 * @export
 */
export const TagResourceTreeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取用户的标签树
         * @param {string} account 
         * @param {string} [domainCode] 
         * @param {number} [tagId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagResourceTree(account: string, domainCode?: string, tagId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedTagTreeDomain> {
            const localVarAxiosArgs = TagResourceTreeApiAxiosParamCreator(configuration).getTagResourceTree(account, domainCode, tagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TagResourceTreeApi - factory interface
 * @export
 */
export const TagResourceTreeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取用户的标签树
         * @param {string} account 
         * @param {string} [domainCode] 
         * @param {number} [tagId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagResourceTree(account: string, domainCode?: string, tagId?: number, options?: any): AxiosPromise<PagedTagTreeDomain> {
            return TagResourceTreeApiFp(configuration).getTagResourceTree(account, domainCode, tagId, options)(axios, basePath);
        },
    };
};

/**
 * TagResourceTreeApi - object-oriented interface
 * @export
 * @class TagResourceTreeApi
 * @extends {BaseAPI}
 */
export class TagResourceTreeApi extends BaseAPI {
    /**
     * 
     * @summary 获取用户的标签树
     * @param {string} account 
     * @param {string} [domainCode] 
     * @param {number} [tagId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagResourceTreeApi
     */
    public getTagResourceTree(account: string, domainCode?: string, tagId?: number, options?: any) {
        return TagResourceTreeApiFp(this.configuration).getTagResourceTree(account, domainCode, tagId, options)(this.axios, this.basePath);
    }

}


/**
 * TypesApi - axios parameter creator
 * @export
 */
export const TypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取实体类型列表
         * @param {string} serviceType 根据分类查询实体列表，查询资源类型传 RESOURCE_ENTITY_TYPE
         * @param {string} superType 指定类型的父类型获取类型树结构，获取资源下的列表传 Resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes(serviceType: string, superType: string, options: any = {}): RequestArgs {
            // verify required parameter 'serviceType' is not null or undefined
            if (serviceType === null || serviceType === undefined) {
                throw new RequiredError('serviceType','Required parameter serviceType was null or undefined when calling listTypes.');
            }
            // verify required parameter 'superType' is not null or undefined
            if (superType === null || superType === undefined) {
                throw new RequiredError('superType','Required parameter superType was null or undefined when calling listTypes.');
            }
            const localVarPath = `/system/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (serviceType !== undefined) {
                localVarQueryParameter['serviceType'] = serviceType;
            }

            if (superType !== undefined) {
                localVarQueryParameter['superType'] = superType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据关联类型和服务类型查询关联实体定义
         * @param {string} typeCode 类型编码，如查询 general_file 类资源的关联定义
         * @param {string} relationshipType 如查询属性定义{relationshipType}传 DEFINITION
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypesByRelationship(typeCode: string, relationshipType: string, options: any = {}): RequestArgs {
            // verify required parameter 'typeCode' is not null or undefined
            if (typeCode === null || typeCode === undefined) {
                throw new RequiredError('typeCode','Required parameter typeCode was null or undefined when calling listTypesByRelationship.');
            }
            // verify required parameter 'relationshipType' is not null or undefined
            if (relationshipType === null || relationshipType === undefined) {
                throw new RequiredError('relationshipType','Required parameter relationshipType was null or undefined when calling listTypesByRelationship.');
            }
            const localVarPath = `/system/types/{typeCode}/relationships/{relationshipType}/types`
                .replace(`{${"typeCode"}}`, encodeURIComponent(String(typeCode)))
                .replace(`{${"relationshipType"}}`, encodeURIComponent(String(relationshipType)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TypesApi - functional programming interface
 * @export
 */
export const TypesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取实体类型列表
         * @param {string} serviceType 根据分类查询实体列表，查询资源类型传 RESOURCE_ENTITY_TYPE
         * @param {string} superType 指定类型的父类型获取类型树结构，获取资源下的列表传 Resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes(serviceType: string, superType: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedEntityTypeTree> {
            const localVarAxiosArgs = TypesApiAxiosParamCreator(configuration).listTypes(serviceType, superType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据关联类型和服务类型查询关联实体定义
         * @param {string} typeCode 类型编码，如查询 general_file 类资源的关联定义
         * @param {string} relationshipType 如查询属性定义{relationshipType}传 DEFINITION
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypesByRelationship(typeCode: string, relationshipType: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntityType>> {
            const localVarAxiosArgs = TypesApiAxiosParamCreator(configuration).listTypesByRelationship(typeCode, relationshipType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TypesApi - factory interface
 * @export
 */
export const TypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取实体类型列表
         * @param {string} serviceType 根据分类查询实体列表，查询资源类型传 RESOURCE_ENTITY_TYPE
         * @param {string} superType 指定类型的父类型获取类型树结构，获取资源下的列表传 Resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypes(serviceType: string, superType: string, options?: any): AxiosPromise<PagedEntityTypeTree> {
            return TypesApiFp(configuration).listTypes(serviceType, superType, options)(axios, basePath);
        },
        /**
         * 
         * @summary 根据关联类型和服务类型查询关联实体定义
         * @param {string} typeCode 类型编码，如查询 general_file 类资源的关联定义
         * @param {string} relationshipType 如查询属性定义{relationshipType}传 DEFINITION
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTypesByRelationship(typeCode: string, relationshipType: string, options?: any): AxiosPromise<Array<EntityType>> {
            return TypesApiFp(configuration).listTypesByRelationship(typeCode, relationshipType, options)(axios, basePath);
        },
    };
};

/**
 * TypesApi - object-oriented interface
 * @export
 * @class TypesApi
 * @extends {BaseAPI}
 */
export class TypesApi extends BaseAPI {
    /**
     * 
     * @summary 获取实体类型列表
     * @param {string} serviceType 根据分类查询实体列表，查询资源类型传 RESOURCE_ENTITY_TYPE
     * @param {string} superType 指定类型的父类型获取类型树结构，获取资源下的列表传 Resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    public listTypes(serviceType: string, superType: string, options?: any) {
        return TypesApiFp(this.configuration).listTypes(serviceType, superType, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 根据关联类型和服务类型查询关联实体定义
     * @param {string} typeCode 类型编码，如查询 general_file 类资源的关联定义
     * @param {string} relationshipType 如查询属性定义{relationshipType}传 DEFINITION
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypesApi
     */
    public listTypesByRelationship(typeCode: string, relationshipType: string, options?: any) {
        return TypesApiFp(this.configuration).listTypesByRelationship(typeCode, relationshipType, options)(this.axios, this.basePath);
    }

}


/**
 * UserRoleApi - axios parameter creator
 * @export
 */
export const UserRoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取用户角色列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRoles(options: any = {}): RequestArgs {
            const localVarPath = `/system/roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserRoleApi - functional programming interface
 * @export
 */
export const UserRoleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取用户角色列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRoles(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRole> {
            const localVarAxiosArgs = UserRoleApiAxiosParamCreator(configuration).listUserRoles(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserRoleApi - factory interface
 * @export
 */
export const UserRoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取用户角色列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRoles(options?: any): AxiosPromise<PagedRole> {
            return UserRoleApiFp(configuration).listUserRoles(options)(axios, basePath);
        },
    };
};

/**
 * UserRoleApi - object-oriented interface
 * @export
 * @class UserRoleApi
 * @extends {BaseAPI}
 */
export class UserRoleApi extends BaseAPI {
    /**
     * 
     * @summary 获取用户角色列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRoleApi
     */
    public listUserRoles(options?: any) {
        return UserRoleApiFp(this.configuration).listUserRoles(options)(this.axios, this.basePath);
    }

}


/**
 * ViewApi - axios parameter creator
 * @export
 */
export const ViewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建 view
         * @param {string} domainCode 
         * @param {ViewUpdatable} [viewUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView(domainCode: string, viewUpdatable?: ViewUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createView.');
            }
            const localVarPath = `/domains/{domainCode}/views`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof viewUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(viewUpdatable !== undefined ? viewUpdatable : {}) : (viewUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除 view
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView(domainCode: string, viewCode: string, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteView.');
            }
            // verify required parameter 'viewCode' is not null or undefined
            if (viewCode === null || viewCode === undefined) {
                throw new RequiredError('viewCode','Required parameter viewCode was null or undefined when calling deleteView.');
            }
            const localVarPath = `/domains/{domainCode}/views/{viewCode}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"viewCode"}}`, encodeURIComponent(String(viewCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 view 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {boolean} [withChildrenNodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView(domainCode: string, viewCode: string, withChildrenNodes?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getView.');
            }
            // verify required parameter 'viewCode' is not null or undefined
            if (viewCode === null || viewCode === undefined) {
                throw new RequiredError('viewCode','Required parameter viewCode was null or undefined when calling getView.');
            }
            const localVarPath = `/domains/{domainCode}/views/{viewCode}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"viewCode"}}`, encodeURIComponent(String(viewCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (withChildrenNodes !== undefined) {
                localVarQueryParameter['withChildrenNodes'] = withChildrenNodes;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 view 列表
         * @param {string} domainCode 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews(domainCode: string, pageNo?: number, pageSize?: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listViews.');
            }
            const localVarPath = `/domains/{domainCode}/views`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新 view 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {ViewUpdatable} [viewUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView(domainCode: string, viewCode: string, viewUpdatable?: ViewUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateView.');
            }
            // verify required parameter 'viewCode' is not null or undefined
            if (viewCode === null || viewCode === undefined) {
                throw new RequiredError('viewCode','Required parameter viewCode was null or undefined when calling updateView.');
            }
            const localVarPath = `/domains/{domainCode}/views/{viewCode}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"viewCode"}}`, encodeURIComponent(String(viewCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof viewUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(viewUpdatable !== undefined ? viewUpdatable : {}) : (viewUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewApi - functional programming interface
 * @export
 */
export const ViewApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建 view
         * @param {string} domainCode 
         * @param {ViewUpdatable} [viewUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView(domainCode: string, viewUpdatable?: ViewUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<View> {
            const localVarAxiosArgs = ViewApiAxiosParamCreator(configuration).createView(domainCode, viewUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除 view
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView(domainCode: string, viewCode: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ViewApiAxiosParamCreator(configuration).deleteView(domainCode, viewCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 view 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {boolean} [withChildrenNodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView(domainCode: string, viewCode: string, withChildrenNodes?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<View> {
            const localVarAxiosArgs = ViewApiAxiosParamCreator(configuration).getView(domainCode, viewCode, withChildrenNodes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 view 列表
         * @param {string} domainCode 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews(domainCode: string, pageNo?: number, pageSize?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedView> {
            const localVarAxiosArgs = ViewApiAxiosParamCreator(configuration).listViews(domainCode, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新 view 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {ViewUpdatable} [viewUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView(domainCode: string, viewCode: string, viewUpdatable?: ViewUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<View> {
            const localVarAxiosArgs = ViewApiAxiosParamCreator(configuration).updateView(domainCode, viewCode, viewUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ViewApi - factory interface
 * @export
 */
export const ViewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建 view
         * @param {string} domainCode 
         * @param {ViewUpdatable} [viewUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView(domainCode: string, viewUpdatable?: ViewUpdatable, options?: any): AxiosPromise<View> {
            return ViewApiFp(configuration).createView(domainCode, viewUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除 view
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView(domainCode: string, viewCode: string, options?: any): AxiosPromise<void> {
            return ViewApiFp(configuration).deleteView(domainCode, viewCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取 view 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {boolean} [withChildrenNodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView(domainCode: string, viewCode: string, withChildrenNodes?: boolean, options?: any): AxiosPromise<View> {
            return ViewApiFp(configuration).getView(domainCode, viewCode, withChildrenNodes, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取 view 列表
         * @param {string} domainCode 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews(domainCode: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PagedView> {
            return ViewApiFp(configuration).listViews(domainCode, pageNo, pageSize, options)(axios, basePath);
        },
        /**
         * 
         * @summary 更新 view 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {ViewUpdatable} [viewUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView(domainCode: string, viewCode: string, viewUpdatable?: ViewUpdatable, options?: any): AxiosPromise<View> {
            return ViewApiFp(configuration).updateView(domainCode, viewCode, viewUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * ViewApi - object-oriented interface
 * @export
 * @class ViewApi
 * @extends {BaseAPI}
 */
export class ViewApi extends BaseAPI {
    /**
     * 
     * @summary 创建 view
     * @param {string} domainCode 
     * @param {ViewUpdatable} [viewUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    public createView(domainCode: string, viewUpdatable?: ViewUpdatable, options?: any) {
        return ViewApiFp(this.configuration).createView(domainCode, viewUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除 view
     * @param {string} domainCode 
     * @param {string} viewCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    public deleteView(domainCode: string, viewCode: string, options?: any) {
        return ViewApiFp(this.configuration).deleteView(domainCode, viewCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取 view 详情
     * @param {string} domainCode 
     * @param {string} viewCode 
     * @param {boolean} [withChildrenNodes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    public getView(domainCode: string, viewCode: string, withChildrenNodes?: boolean, options?: any) {
        return ViewApiFp(this.configuration).getView(domainCode, viewCode, withChildrenNodes, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取 view 列表
     * @param {string} domainCode 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    public listViews(domainCode: string, pageNo?: number, pageSize?: number, options?: any) {
        return ViewApiFp(this.configuration).listViews(domainCode, pageNo, pageSize, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 更新 view 详情
     * @param {string} domainCode 
     * @param {string} viewCode 
     * @param {ViewUpdatable} [viewUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    public updateView(domainCode: string, viewCode: string, viewUpdatable?: ViewUpdatable, options?: any) {
        return ViewApiFp(this.configuration).updateView(domainCode, viewCode, viewUpdatable, options)(this.axios, this.basePath);
    }

}


/**
 * ViewNodeApi - axios parameter creator
 * @export
 */
export const ViewNodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建 viewNode
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {ViewNodeUpdatable} [viewNodeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewNode(domainCode: string, viewCode: string, viewNodeUpdatable?: ViewNodeUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling createViewNode.');
            }
            // verify required parameter 'viewCode' is not null or undefined
            if (viewCode === null || viewCode === undefined) {
                throw new RequiredError('viewCode','Required parameter viewCode was null or undefined when calling createViewNode.');
            }
            const localVarPath = `/domains/{domainCode}/views/{viewCode}/nodes`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"viewCode"}}`, encodeURIComponent(String(viewCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof viewNodeUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(viewNodeUpdatable !== undefined ? viewNodeUpdatable : {}) : (viewNodeUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除 viewNode
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViewNode(domainCode: string, viewCode: string, nodeId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling deleteViewNode.');
            }
            // verify required parameter 'viewCode' is not null or undefined
            if (viewCode === null || viewCode === undefined) {
                throw new RequiredError('viewCode','Required parameter viewCode was null or undefined when calling deleteViewNode.');
            }
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling deleteViewNode.');
            }
            const localVarPath = `/domains/{domainCode}/views/{viewCode}/nodes/{nodeId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"viewCode"}}`, encodeURIComponent(String(viewCode)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 viewNode 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewNode(domainCode: string, viewCode: string, nodeId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling getViewNode.');
            }
            // verify required parameter 'viewCode' is not null or undefined
            if (viewCode === null || viewCode === undefined) {
                throw new RequiredError('viewCode','Required parameter viewCode was null or undefined when calling getViewNode.');
            }
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling getViewNode.');
            }
            const localVarPath = `/domains/{domainCode}/views/{viewCode}/nodes/{nodeId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"viewCode"}}`, encodeURIComponent(String(viewCode)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据父节点标识获取子节点列表
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViewNodesByParentId(domainCode: string, viewCode: string, parentId: number, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling listViewNodesByParentId.');
            }
            // verify required parameter 'viewCode' is not null or undefined
            if (viewCode === null || viewCode === undefined) {
                throw new RequiredError('viewCode','Required parameter viewCode was null or undefined when calling listViewNodesByParentId.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new RequiredError('parentId','Required parameter parentId was null or undefined when calling listViewNodesByParentId.');
            }
            const localVarPath = `/domains/{domainCode}/views/{viewCode}/nodes`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"viewCode"}}`, encodeURIComponent(String(viewCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新 viewNode 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {ViewNodeUpdatable} [viewNodeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewNode(domainCode: string, viewCode: string, nodeId: number, viewNodeUpdatable?: ViewNodeUpdatable, options: any = {}): RequestArgs {
            // verify required parameter 'domainCode' is not null or undefined
            if (domainCode === null || domainCode === undefined) {
                throw new RequiredError('domainCode','Required parameter domainCode was null or undefined when calling updateViewNode.');
            }
            // verify required parameter 'viewCode' is not null or undefined
            if (viewCode === null || viewCode === undefined) {
                throw new RequiredError('viewCode','Required parameter viewCode was null or undefined when calling updateViewNode.');
            }
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling updateViewNode.');
            }
            const localVarPath = `/domains/{domainCode}/views/{viewCode}/nodes/{nodeId}`
                .replace(`{${"domainCode"}}`, encodeURIComponent(String(domainCode)))
                .replace(`{${"viewCode"}}`, encodeURIComponent(String(viewCode)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof viewNodeUpdatable !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(viewNodeUpdatable !== undefined ? viewNodeUpdatable : {}) : (viewNodeUpdatable || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewNodeApi - functional programming interface
 * @export
 */
export const ViewNodeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建 viewNode
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {ViewNodeUpdatable} [viewNodeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewNode(domainCode: string, viewCode: string, viewNodeUpdatable?: ViewNodeUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewNode> {
            const localVarAxiosArgs = ViewNodeApiAxiosParamCreator(configuration).createViewNode(domainCode, viewCode, viewNodeUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除 viewNode
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViewNode(domainCode: string, viewCode: string, nodeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ViewNodeApiAxiosParamCreator(configuration).deleteViewNode(domainCode, viewCode, nodeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 viewNode 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewNode(domainCode: string, viewCode: string, nodeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewNode> {
            const localVarAxiosArgs = ViewNodeApiAxiosParamCreator(configuration).getViewNode(domainCode, viewCode, nodeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据父节点标识获取子节点列表
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViewNodesByParentId(domainCode: string, viewCode: string, parentId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewNode>> {
            const localVarAxiosArgs = ViewNodeApiAxiosParamCreator(configuration).listViewNodesByParentId(domainCode, viewCode, parentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新 viewNode 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {ViewNodeUpdatable} [viewNodeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewNode(domainCode: string, viewCode: string, nodeId: number, viewNodeUpdatable?: ViewNodeUpdatable, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewNode> {
            const localVarAxiosArgs = ViewNodeApiAxiosParamCreator(configuration).updateViewNode(domainCode, viewCode, nodeId, viewNodeUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ViewNodeApi - factory interface
 * @export
 */
export const ViewNodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建 viewNode
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {ViewNodeUpdatable} [viewNodeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewNode(domainCode: string, viewCode: string, viewNodeUpdatable?: ViewNodeUpdatable, options?: any): AxiosPromise<ViewNode> {
            return ViewNodeApiFp(configuration).createViewNode(domainCode, viewCode, viewNodeUpdatable, options)(axios, basePath);
        },
        /**
         * 
         * @summary 删除 viewNode
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViewNode(domainCode: string, viewCode: string, nodeId: number, options?: any): AxiosPromise<void> {
            return ViewNodeApiFp(configuration).deleteViewNode(domainCode, viewCode, nodeId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 获取 viewNode 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewNode(domainCode: string, viewCode: string, nodeId: number, options?: any): AxiosPromise<ViewNode> {
            return ViewNodeApiFp(configuration).getViewNode(domainCode, viewCode, nodeId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 根据父节点标识获取子节点列表
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViewNodesByParentId(domainCode: string, viewCode: string, parentId: number, options?: any): AxiosPromise<Array<ViewNode>> {
            return ViewNodeApiFp(configuration).listViewNodesByParentId(domainCode, viewCode, parentId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 更新 viewNode 详情
         * @param {string} domainCode 
         * @param {string} viewCode 
         * @param {number} nodeId 
         * @param {ViewNodeUpdatable} [viewNodeUpdatable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewNode(domainCode: string, viewCode: string, nodeId: number, viewNodeUpdatable?: ViewNodeUpdatable, options?: any): AxiosPromise<ViewNode> {
            return ViewNodeApiFp(configuration).updateViewNode(domainCode, viewCode, nodeId, viewNodeUpdatable, options)(axios, basePath);
        },
    };
};

/**
 * ViewNodeApi - object-oriented interface
 * @export
 * @class ViewNodeApi
 * @extends {BaseAPI}
 */
export class ViewNodeApi extends BaseAPI {
    /**
     * 
     * @summary 创建 viewNode
     * @param {string} domainCode 
     * @param {string} viewCode 
     * @param {ViewNodeUpdatable} [viewNodeUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewNodeApi
     */
    public createViewNode(domainCode: string, viewCode: string, viewNodeUpdatable?: ViewNodeUpdatable, options?: any) {
        return ViewNodeApiFp(this.configuration).createViewNode(domainCode, viewCode, viewNodeUpdatable, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 删除 viewNode
     * @param {string} domainCode 
     * @param {string} viewCode 
     * @param {number} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewNodeApi
     */
    public deleteViewNode(domainCode: string, viewCode: string, nodeId: number, options?: any) {
        return ViewNodeApiFp(this.configuration).deleteViewNode(domainCode, viewCode, nodeId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 获取 viewNode 详情
     * @param {string} domainCode 
     * @param {string} viewCode 
     * @param {number} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewNodeApi
     */
    public getViewNode(domainCode: string, viewCode: string, nodeId: number, options?: any) {
        return ViewNodeApiFp(this.configuration).getViewNode(domainCode, viewCode, nodeId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 根据父节点标识获取子节点列表
     * @param {string} domainCode 
     * @param {string} viewCode 
     * @param {number} parentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewNodeApi
     */
    public listViewNodesByParentId(domainCode: string, viewCode: string, parentId: number, options?: any) {
        return ViewNodeApiFp(this.configuration).listViewNodesByParentId(domainCode, viewCode, parentId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 更新 viewNode 详情
     * @param {string} domainCode 
     * @param {string} viewCode 
     * @param {number} nodeId 
     * @param {ViewNodeUpdatable} [viewNodeUpdatable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewNodeApi
     */
    public updateViewNode(domainCode: string, viewCode: string, nodeId: number, viewNodeUpdatable?: ViewNodeUpdatable, options?: any) {
        return ViewNodeApiFp(this.configuration).updateViewNode(domainCode, viewCode, nodeId, viewNodeUpdatable, options)(this.axios, this.basePath);
    }

}


